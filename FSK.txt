--[[

 _   _    _   _   _____     _       ___     _   _   _   _   ____   
| | | |  | | | | |_   _|   / \     / _ \   | | | | | | | | | __ )  
| |_| |  | | | |   | |    / _ \   | | | |  | |_| | | | | | |  _ \  
|  _  |  | | | |   | |   / ___ \  | |_| |  |  _  | | |_| | | |_) | 
\_| |_/   \___/    \_/  /_/   \_\  \___/   \_| |_/  \___/  |____/

                        Hutao Hub
]]

---------------------------------------------------------------------------------

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/SLK-gaming/Fluent/refs/heads/main/SaveManager.lua.txt"))()

local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/SLK-gaming/Fluent/refs/heads/main/InterfaceManager.lua.txt"))()

local minimizeUI = Enum.KeyCode.RightAlt

-- üü¢ Create Main UI
local Window = Fluent:CreateWindow({
    Title = "Hutao Hub [Free] | Forsaken",
    SubTitle = "Version 3.0.0",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 360),
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = minimizeUI
})

-- Tabs
local Tabs = {
    Dev = Window:AddTab({ Title = "About", Icon = "rbxassetid://121302760641013"}),
    Farm = Window:AddTab({ Title = "Farm", Icon = "rbxassetid://121302760641013"}),
    Main = Window:AddTab({ Title = "Main", Icon = "rbxassetid://121302760641013" }),
    Player = Window:AddTab({ Title = "Player", Icon = "rbxassetid://121302760641013" }),
    Visual = Window:AddTab({ Title = "Visual", Icon = "rbxassetid://121302760641013" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "rbxassetid://121302760641013" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "rbxassetid://121302760641013" }),
}         

-- Tab.Dev

local Options = Fluent.Options


    Tabs.Dev:AddParagraph({
        Title = "Note",
        Content = "Thank you for using the script!"
    })

    Tabs.Dev:AddSection("‚Ü≥ Links")

    Tabs.Dev:AddButton({
        Title = "Discord",
        Description = "Copy the link to join the discord!",
        Callback = function()
            setclipboard("https://discord.gg/WEGT92yv")
            Fluent:Notify({
                Title = "Notification",
                Content = "Successfully copied to the clipboard",
                SubContent = "", -- Optional
                Duration = 3 
            })
        end
    })



    Tabs.Dev:AddButton({
        Title = "Youtube",
        Description = "Copy link to Subscribe to Youtube channel!",
        Callback = function()
            setclipboard("https://www.youtube.com/@SLKgamingSSR")
            Fluent:Notify({
                Title = "Notification",
                Content = "Successfully copied to the clipboard!",
                SubContent = "", -- Optional
                Duration = 3 
            })
        end
    })


    Tabs.Dev:AddButton({
        Title = "Facebook",
        Description = "Copy link to join facebook group!",
        Callback = function()
            setclipboard("https://www.facebook.com/groups/1180845463307087/?ref=share&mibextid=NSMWBT")
            Fluent:Notify({
                Title = "Notification",
                Content = "Successfully copied to the clipboard!",
                SubContent = "", -- Optional
                Duration = 3 
            })
        end
    })

-- Tabs.Farm


local Players = game:GetService("Players")
local PFS = game:GetService("PathfindingService")
local VIM = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LP = Players.LocalPlayer
local Spectators = {}
local currentCharacter
local isInGame, busy, isSprinting = false, false, false
local stamina, counter = 100, 0
local Killer, Survivor = false, false

-- Danh s√°ch killer nguy hi·ªÉm
local DangerousKillers = {
    ["Jason"] = true,
    ["1x1x1x1"] = true,
    ["c00lkidd"] = true,
    ["Noli"] = true,
    ["JohnDoe"] = true,
    ["Quest666"] = true
}

-- H√†m ki·ªÉm tra c√≥ killer nguy hi·ªÉm g·∫ßn generator kh√¥ng
local function isKillerNearGenerator(generatorPos, distance)
    local killersFolder = workspace.Players:FindFirstChild("Killers")
    if not killersFolder then return false end
    for _, killer in ipairs(killersFolder:GetChildren()) do
        if killer:IsA("Model") and killer:FindFirstChild("HumanoidRootPart") then
            if DangerousKillers[killer.Name] then
                local dist = (killer.HumanoidRootPart.Position - generatorPos).Magnitude
                if dist <= distance then
                    return true
                end
            end
        end
    end
    return false
end

-- H√†m ki·ªÉm tra m·∫∑t ƒë·∫•t
local function safe(pos)
    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {workspace.Map.Ingame.Map}
    rayParams.FilterType = Enum.RaycastFilterType.Include
    local rayResult = workspace:Raycast(pos + Vector3.new(0, 5, 0), Vector3.new(0, -10, 0), rayParams)
    if rayResult then
        local yDiff = math.abs(rayResult.Position.Y - pos.Y)
        return yDiff < 5
    end
    return false
end

-- N√∫t Toggle Fluent UI
Tabs.Farm:AddToggle("AutoExpMoney", {
    Title = "Auto Farm Exp / Money",
    Default = false
})
:OnChanged(function(Value)
    _G.AutoFarm = Value

    -- C·∫≠p nh·∫≠t Spectators / InGame
    task.spawn(function()
        while _G.AutoFarm do
            Spectators = {}
            for _, v in ipairs(workspace:WaitForChild("Players"):WaitForChild("Spectating"):GetChildren()) do
                table.insert(Spectators, v.Name)
            end
            isInGame = not table.find(Spectators, LP.Name)
            task.wait(0.5)
        end
    end)

    -- ‚ö†Ô∏è ƒê√É XO√Å CH·ª®C NƒÇNG AUTO SPRINT

    -- X√°c ƒë·ªãnh m√¨nh l√† Killer hay Survivor
    task.spawn(function()
        while _G.AutoFarm do
            if workspace:FindFirstChild("Players") then
                local killersFolder = workspace.Players:FindFirstChild("Killers")
                local survivorsFolder = workspace.Players:FindFirstChild("Survivors")
                if killersFolder and survivorsFolder then
                    Killer = killersFolder:FindFirstChild(LP.Name) or table.find(killersFolder:GetChildren(), LP.Character)
                    Survivor = survivorsFolder:FindFirstChild(LP.Name) or table.find(survivorsFolder:GetChildren(), LP.Character)
                end
            end
            task.wait(0.5)
        end
    end)

    -- H√†nh ƒë·ªông ch√≠nh
    task.spawn(function()
        task.wait(0.5)
        local killersFolder = workspace.Players:WaitForChild("Killers")
        local survivorsFolder = workspace.Players:WaitForChild("Survivors")

        while _G.AutoFarm do
            if Killer then
                -- Theo d√µi & t·∫•n c√¥ng Survivor
                local target = nil
                for _, survivor in ipairs(survivorsFolder:GetChildren()) do
                    if survivor:IsA("Model")
                    and survivor:FindFirstChild("HumanoidRootPart")
                    and survivor:FindFirstChild("Humanoid")
                    and survivor.Humanoid.Health > 0 then
                        target = survivor
                        break
                    end
                end

                if target then
                    -- D·ªãch chuy·ªÉn theo target
                    task.spawn(function()
                        while _G.AutoFarm
                        and target
                        and target:IsDescendantOf(survivorsFolder)
                        and target:FindFirstChild("Humanoid")
                        and target.Humanoid.Health > 0 do

                            local character = LP.Character
                            if character and character:FindFirstChild("HumanoidRootPart") and target:FindFirstChild("HumanoidRootPart") then
                                character:PivotTo(target.HumanoidRootPart.CFrame)
                            end
                            task.wait(0.1)
                        end
                    end)

                    -- T·∫•n c√¥ng target
                    task.spawn(function()
                        while _G.AutoFarm
                        and target
                        and target:IsDescendantOf(survivorsFolder)
                        and target:FindFirstChild("Humanoid")
                        and target.Humanoid.Health > 0
                        and target:FindFirstChild("HumanoidRootPart") do

                            for _, key in ipairs({Enum.KeyCode.Q, Enum.KeyCode.E, Enum.KeyCode.R}) do
                                if not _G.AutoFarm then break end
                                VIM:SendMouseButtonEvent(0, 0, 0, true, game, 0)
                                task.wait(0.05)
                                VIM:SendMouseButtonEvent(0, 0, 0, false, game, 0)
                                VIM:SendKeyEvent(true, key, false, game)
                                task.wait(0.05)
                                VIM:SendKeyEvent(false, key, false, game)
                                task.wait(0.1)
                            end
                            task.wait(0.8)
                        end
                    end)
                else
                    task.wait(0.5)
                end

            elseif Survivor then
                if isInGame then
                    -- L·∫•y character
                    for _, surv in ipairs(survivorsFolder:GetChildren()) do
                        if surv:GetAttribute("Username") == LP.Name then
                            currentCharacter = surv
                            break
                        end
                    end

                    -- Check ch·∫øt th√¨ reset
                    task.spawn(function()
                        while _G.AutoFarm do
                            if currentCharacter and currentCharacter:FindFirstChild("Humanoid") and currentCharacter.Humanoid.Health <= 0 then
                                isInGame = false
                                isSprinting = false
                                busy = false
                                break
                            end
                            task.wait(0.5)
                        end
                    end)

                    -- L√†m generator
                    for _, gen in ipairs(workspace.Map.Ingame:WaitForChild("Map"):GetChildren()) do
                        if not _G.AutoFarm then break end
                        if gen.Name == "Generator" and gen:FindFirstChild("Progress") and gen.Progress.Value ~= 100 then

                            -- L·∫•y v·ªã tr√≠ ph√≠a tr∆∞·ªõc generator
                            local genCFrame = gen:GetPivot()
                            local goalPos = (genCFrame * CFrame.new(0, 0, -3)).Position

                            -- Anti-Killer check
                            if isKillerNearGenerator(goalPos, 50) then
                                print("‚ö†Ô∏è B·ªè qua generator v√¨ killer nguy hi·ªÉm ·ªü g·∫ßn!")
                                continue
                            end

                            if currentCharacter and currentCharacter:FindFirstChild("HumanoidRootPart") then
                                currentCharacter:PivotTo(CFrame.new(goalPos + Vector3.new(0, 2, 0)))
                                task.wait(0.25)

                                local prompt = gen:FindFirstChild("Main") and gen.Main:FindFirstChild("Prompt")
                                if prompt then
                                    prompt.HoldDuration = 0
                                    prompt.RequiresLineOfSight = false
                                    prompt.MaxActivationDistance = 99999
                                    task.wait(0.1)

                                    pcall(function()
                                        prompt:InputHoldBegin()
                                        prompt:InputHoldEnd()
                                    end)

                                    busy = true
                                    counter = 0
                                    while _G.AutoFarm and gen.Progress.Value ~= 100 do
                                        pcall(function()
                                            prompt:InputHoldBegin()
                                            prompt:InputHoldEnd()
                                            if _G.AutoGeneral == false then
                                                gen.Remotes.RE:FireServer()
                                            end
                                        end)
                                        task.wait(1.5)
                                        counter += 1
                                        if counter >= 10 or not isInGame then break end
                                    end
                                    busy = false
                                    if not isInGame then break end
                                end
                            end
                        end
                    end
                end
            end
            task.wait(0.5)
        end
    end)
end)



    Tabs.Farm:AddSection("‚Ü≥ Generator")

local solveGeneratorCooldown = false
local AutoFinishGen = false

-- H√†m t√¨m generator g·∫ßn nh·∫•t
local function getClosestGenerator()
    local char = game.Players.LocalPlayer.Character
    if not char or not char.PrimaryPart then return nil end

    local root = char.PrimaryPart
    local closest, shortestDist = nil, math.huge

    local mapContainer = workspace:FindFirstChild("Map")
    if mapContainer then
        local ingame = mapContainer:FindFirstChild("Ingame")
        if ingame then
            local map = ingame:FindFirstChild("Map")
            if map then
                for _, obj in ipairs(map:GetChildren()) do
                    if obj.Name == "Generator" and obj:IsA("Model") and obj.PrimaryPart then
                        local dist = (root.Position - obj.PrimaryPart.Position).Magnitude
                        if dist < shortestDist then
                            closest = obj
                            shortestDist = dist
                        end
                    end
                end
            end
        end
    end
    return closest
end

-- N√∫t Finish generator th·ªß c√¥ng
Tabs.Farm:AddButton({
    Title = "Finish Generator",
    Callback = function()
        if solveGeneratorCooldown then 
            print("‚è≥ Please wait before trying again!") 
            return
        end
        if AutoFinishGen then
            print("‚ùå Please disable Auto Finish Generator first!")
            return
        end

        local gen = getClosestGenerator()
        if gen and gen:FindFirstChild("Remotes") and gen.Remotes:FindFirstChild("RE") then
            gen.Remotes.RE:FireServer()
            solveGeneratorCooldown = true
            task.delay(1.5, function()
                solveGeneratorCooldown = false
            end)
        end
    end
})

-- Toggle Auto Finish Generator
Tabs.Farm:AddToggle("AutoFinishGen", {
    Title = "Auto Finish Generator",
    Default = false
}):OnChanged(function(state)
    AutoFinishGen = state

    if state then
        if solveGeneratorCooldown then
            print("‚ö†Ô∏è Please wait cooldown before enabling Auto Finish!") 
            -- t·∫Øt toggle qua Fluent.Options
            Fluent.Options.AutoFinishGen:SetValue(false)
            return
        end

        task.spawn(function()
            while AutoFinishGen do
                local gen = getClosestGenerator()
                if gen and gen:FindFirstChild("Remotes") and gen.Remotes:FindFirstChild("RE") then
                    gen.Remotes.RE:FireServer()
                end
                solveGeneratorCooldown = true
                task.wait(1.5)
                solveGeneratorCooldown = false
            end
        end)
    else
        solveGeneratorCooldown = false
    end
end)




    Tabs.Farm:AddSection("‚Ü≥ Items")

local Players = game:GetService("Players")
local LP = Players.LocalPlayer

-- H√†m nh·∫∑t item g·∫ßn nh·∫•t
local function pickUpNearest()
    local map = workspace:FindFirstChild("Map") 
                and workspace.Map:FindFirstChild("Ingame") 
                and workspace.Map.Ingame:FindFirstChild("Map")
    if not map or not LP.Character or not LP.Character:FindFirstChild("HumanoidRootPart") then return end

    local oldCFrame = LP.Character.HumanoidRootPart.CFrame
    for _, item in ipairs(map:GetChildren()) do
        if item:IsA("Tool") and item:FindFirstChild("ItemRoot") 
           and item.ItemRoot:FindFirstChild("ProximityPrompt") then
            LP.Character.HumanoidRootPart.CFrame = item.ItemRoot.CFrame
            task.wait(0.3)
            fireproximityprompt(item.ItemRoot.ProximityPrompt)
            task.wait(0.4)
            LP.Character.HumanoidRootPart.CFrame = oldCFrame
            break
        end
    end
end

-- Button: Pick Up Item (1 l·∫ßn)
Tabs.Farm:AddButton({
    Title = "Pick Up Item",
    Callback = pickUpNearest
})

-- Toggle: Auto PickUp Item (l·∫∑p)
Tabs.Farm:AddToggle("ItemPick", {
    Title = "Auto PickUp Item",
    Default = false
}):OnChanged(function(Value)
    _G.PickupItem = Value
    if not Value then return end

    task.spawn(function()
        while _G.PickupItem do
            pickUpNearest()
            task.wait(0.2) -- delay gi·ªØa m·ªói l·∫ßn nh·∫∑t
        end
    end)
end)




-- Tabs.Main

-- AutoUseCoinFlip (Fix)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RemoteEvent = ReplicatedStorage:WaitForChild("Modules", 5)
    and ReplicatedStorage.Modules:WaitForChild("Network", 5)
    and ReplicatedStorage.Modules.Network:WaitForChild("RemoteEvent", 5)

local ActiveAutoUseCoinFlip = false

Tabs.Main:AddToggle("AutoUseCoinFlip", {
    Title = "Auto Flip Coin",
    Default = false,
}):OnChanged(function(state)
    ActiveAutoUseCoinFlip = state

    if state then
        task.spawn(function()
            while ActiveAutoUseCoinFlip do
                if RemoteEvent then
                    pcall(function()
                        RemoteEvent:FireServer("UseActorAbility", "CoinFlip")
                    end)
                end
                task.wait(1)
            end
        end)
    end
end)

    Tabs.Main:AddSection("‚Ü≥ Chance")

-- === Auto Aim Shoot (Fix) ===
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- Config
local aimDuration = 1.7
local aimTargets = { "Jason", "c00lkidd", "JohnDoe", "1x1x1x1", "Noli" }
local trackedAnimations = {
    ["103601716322988"] = true,
    ["133491532453922"] = true,
    ["86371356500204"] = true,
    ["76649505662612"] = true,
    ["81698196845041"] = true
}

-- State
local active = false
local Humanoid, HRP = nil, nil
local lastTriggerTime = 0
local aiming = false
local originalWS, originalJP, originalAutoRotate
local predictionValue = 4
local aimConn -- connection loop

-- Cho ph√©p GUI thay ƒë·ªïi gi√° tr·ªã prediction
function setPredictionValue(val)
    predictionValue = val
end

-- Setup Character
local function setupCharacter(char)
    Humanoid = char:WaitForChild("Humanoid")
    HRP = char:WaitForChild("HumanoidRootPart")
end
if LocalPlayer.Character then
    setupCharacter(LocalPlayer.Character)
end
LocalPlayer.CharacterAdded:Connect(setupCharacter)

-- Target Check
local function getValidTarget()
    local killersFolder = workspace:FindFirstChild("Players") and workspace.Players:FindFirstChild("Killers")
    if killersFolder then
        for _, name in ipairs(aimTargets) do
            local target = killersFolder:FindFirstChild(name)
            if target and target:FindFirstChild("HumanoidRootPart") then
                return target.HumanoidRootPart
            end
        end
    end
    return nil
end

-- Playing Animations
local function getPlayingAnimationIds()
    local ids = {}
    if Humanoid then
        for _, track in ipairs(Humanoid:GetPlayingAnimationTracks()) do
            if track.Animation and track.Animation.AnimationId then
                local id = track.Animation.AnimationId:match("%d+")
                if id then ids[id] = true end
            end
        end
    end
    return ids
end

-- üöÄ Start Auto Aim
local function startAutoAim()
    if active then return end
    active = true

    aimConn = RunService.RenderStepped:Connect(function()
        if not active or not Humanoid or not HRP then return end

        local playing = getPlayingAnimationIds()
        local triggered = false
        for id in pairs(trackedAnimations) do
            if playing[id] then
                triggered = true
                break
            end
        end

        if triggered then
            lastTriggerTime = os.clock()
            aiming = true
        end

        if aiming and os.clock() - lastTriggerTime <= aimDuration then
            if not originalWS then
                originalWS, originalJP, originalAutoRotate = Humanoid.WalkSpeed, Humanoid.JumpPower, Humanoid.AutoRotate
            end

            Humanoid.AutoRotate = false
            HRP.AssemblyAngularVelocity = Vector3.zero

            local targetHRP = getValidTarget()
            if targetHRP then
                local predictedPos = targetHRP.Position + (targetHRP.CFrame.LookVector * predictionValue)
                local direction = (predictedPos - HRP.Position).Unit
                local yRot = math.atan2(-direction.X, -direction.Z)
                HRP.CFrame = CFrame.new(HRP.Position) * CFrame.Angles(0, yRot, 0)
            end
        elseif aiming then
            aiming = false
            if originalWS and originalJP and originalAutoRotate ~= nil then
                Humanoid.WalkSpeed, Humanoid.JumpPower, Humanoid.AutoRotate = originalWS, originalJP, originalAutoRotate
                originalWS, originalJP, originalAutoRotate = nil, nil, nil
            end
        end
    end)
end

-- üõë Stop Auto Aim
local function stopAutoAim()
    active = false
    aiming = false
    if aimConn then
        aimConn:Disconnect()
        aimConn = nil
    end
end

-- === GUI Bindings ===
Tabs.Main:AddSlider("PredictionSlider", {
    Title = "Prediction",
    Default = 4,
    Min = 0,
    Max = 10,
    Rounding = 1,
}):OnChanged(function(val)
    setPredictionValue(val)
end)

Tabs.Main:AddToggle("AutoAimToggle", {
    Title = "Auto Aim Shoot",
    Default = false,
}):OnChanged(function(enabled)
    if enabled then
        startAutoAim()
    else
        stopAutoAim()
    end
end)


    Tabs.Main:AddSection("‚Ü≥ Two Time")

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local lp = Players.LocalPlayer

-- Vars
local enabled = false
local cooldown = false
local lastTarget = nil
local maxDistance = 5 -- Kho·∫£ng c√°ch m·∫∑c ƒë·ªãnh
local daggerRemote = ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent")
local killerNames = { "Jason", "c00lkidd", "JohnDoe", "1x1x1x1", "Noli" }
local killersFolder = workspace:WaitForChild("Players"):WaitForChild("Killers")

-- Toggle
local BackstabToggle = Tabs.Main:AddToggle("BackstabToggle", {
    Title = "Auto Backstab",
    Default = false
})

BackstabToggle:OnChanged(function(Value)
    enabled = Value
end)

-- Slider cho kho·∫£ng c√°ch
local DistanceSlider = Tabs.Main:AddSlider("DistanceSlider", {
    Title = "Distance",
    Min = 1,
    Max = 10,
    Default = 5,
    Rounding = 1,
    ValueName = "studs"
})

DistanceSlider:OnChanged(function(Value)
    maxDistance = Value
end)

-- Helper
local function isBehindTarget(hrp, targetHRP)
    local direction = -targetHRP.CFrame.LookVector
    local toPlayer = (hrp.Position - targetHRP.Position)
    local distance = toPlayer.Magnitude
    local isBehind = toPlayer:Dot(direction) > 0.5
    return distance <= maxDistance and isBehind
end

-- Main loop
RunService.Heartbeat:Connect(function()
    if not enabled or cooldown then return end

    local char = lp.Character
    if not (char and char:FindFirstChild("HumanoidRootPart")) then return end
    local hrp = char.HumanoidRootPart

    for _, name in ipairs(killerNames) do
        local killer = killersFolder:FindFirstChild(name)
        if killer and killer:FindFirstChild("HumanoidRootPart") then
            local kHRP = killer.HumanoidRootPart

            if isBehindTarget(hrp, kHRP) and killer ~= lastTarget then
                cooldown = true
                lastTarget = killer

                local behindPos = kHRP.Position - (kHRP.CFrame.LookVector * 2)
                hrp.CFrame = CFrame.new(behindPos, behindPos + kHRP.CFrame.LookVector)

                daggerRemote:FireServer("UseActorAbility", "Dagger")

                local start = tick()
                local connection
                connection = RunService.Heartbeat:Connect(function()
                    if not (char and char.Parent and kHRP and kHRP.Parent) then
                        if connection then connection:Disconnect() end
                        return
                    end
                    if tick() - start >= 0.7 then
                        if connection then connection:Disconnect() end
                        task.delay(2, function()
                            cooldown = false
                            lastTarget = nil
                        end)
                        return
                    end
                    local behind = kHRP.Position - (kHRP.CFrame.LookVector * 2)
                    hrp.CFrame = CFrame.new(behind, behind + kHRP.CFrame.LookVector)
                end)

                break
            end
        end
    end
end)



    Tabs.Main:AddSection("‚Ü≥ Guest1337")


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local localPlayer = Players.LocalPlayer

-- ‚úÖ Animation IDs
local animationIds = {
    ["126830014841198"] = true,
    ["126355327951215"] = true,
    ["121086746534252"] = true,
    ["18885909645"]     = true,
    ["98456918873918"]  = true,
    ["105458270463374"] = true,
    ["83829782357897"]  = true,
    ["125403313786645"] = true,
    ["118298475669935"] = true,
    ["82113744478546"]  = true,
    ["70371667919898"]  = true,
    ["99135633258223"]  = true,
    ["97167027849946"]  = true,
    ["109230267448394"] = true,
    ["139835501033932"] = true,
    ["126896426760253"] = true,
}

local toggleOn = false
local strictRangeOn = false
local detectionRange = 18

local clickedTracks = {}
local tracksStartedInRange = {}

-- ‚úÖ Click the Block ImageButton (mobile-safe)
local function clickBlockButton()
    local gui = localPlayer:FindFirstChild("PlayerGui")
    if not gui then return end

    local mainUI = gui:FindFirstChild("MainUI")
    local container = mainUI and mainUI:FindFirstChild("AbilityContainer")
    local blockButton = container and container:FindFirstChild("Block")

    if blockButton and blockButton:IsA("ImageButton") and blockButton.Visible then
        local success = false
        for _, conn in ipairs(getconnections(blockButton.MouseButton1Click)) do
            pcall(function()
                conn:Fire()
                success = true
            end)
        end
        if not success then
            pcall(function()
                blockButton:Activate()
            end)
        end
    end
end

-- üîé Detect new animations only
local function detectNewAnimations(humanoid, playerName, dist)
    for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
        local anim = track.Animation
        if anim and anim.AnimationId then
            local id = string.match(anim.AnimationId, "%d+")
            if id and animationIds[id] and not clickedTracks[track] then
                clickedTracks[track] = true
                tracksStartedInRange[track] = dist <= detectionRange

                task.spawn(function()
                    track.Stopped:Wait()
                    clickedTracks[track] = nil
                    tracksStartedInRange[track] = nil
                end)
            end
        end
    end
end

-- üìù Persistent toggle & range state
local function getBoolFlag(name)
    local flag = localPlayer:FindFirstChild(name)
    if not flag then
        flag = Instance.new("BoolValue")
        flag.Name = name
        flag.Value = false
        flag.Parent = localPlayer
    end
    return flag
end

local function getNumberFlag(name)
    local flag = localPlayer:FindFirstChild(name)
    if not flag then
        flag = Instance.new("NumberValue")
        flag.Name = name
        flag.Value = 18
        flag.Parent = localPlayer
    end
    return flag
end

local toggleFlag = getBoolFlag("AutoBlockToggle")
local strictFlag = getBoolFlag("AutoBlockStrictRange")
local rangeFlag = getNumberFlag("AutoBlockRange")

toggleOn = toggleFlag.Value
strictRangeOn = strictFlag.Value
detectionRange = rangeFlag.Value

-- üïπ GUI using Fluent (fixed IDs)
Tabs.Main:AddToggle("AutoBlockV2", {
    Title = "Auto Block",
    Default = toggleOn,
}):OnChanged(function(state)
    local ok, err = pcall(function()
        toggleOn = state
        toggleFlag.Value = state
    end)
    if not ok then warn("[AutoBlock] Error:", err) end
end)

Tabs.Main:AddToggle("StrictRangeCheck", {
    Title = "Auto Check",
    Default = strictRangeOn,
}):OnChanged(function(state)
    local ok, err = pcall(function()
        strictRangeOn = state
        strictFlag.Value = state
    end)
    if not ok then warn("[StrictRange] Error:", err) end
end)

Tabs.Main:AddSlider("RangeCheckSlider", {
    Title = "Range Check",
    Min = 1,
    Max = 100,
    Default = detectionRange,
    Rounding = 1,
}):OnChanged(function(value)
    local ok, err = pcall(function()
        detectionRange = value
        rangeFlag.Value = value
    end)
    if not ok then warn("[RangeCheck] Error:", err) end
end)

-- üïπ Main loop
RunService.Heartbeat:Connect(function()
    if not toggleOn then return end

    local myChar = localPlayer.Character
    local myRoot = myChar and myChar:FindFirstChild("HumanoidRootPart")
    if not myRoot then return end

    for _, otherPlayer in ipairs(Players:GetPlayers()) do
        if otherPlayer ~= localPlayer and otherPlayer.Character then
            local root = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
            local humanoid = otherPlayer.Character:FindFirstChildOfClass("Humanoid")
            if root and humanoid then
                local dist = (root.Position - myRoot.Position).Magnitude
                if dist <= detectionRange then
                    detectNewAnimations(humanoid, otherPlayer.Name, dist)

                    for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
                        if clickedTracks[track] then
                            if strictRangeOn and not tracksStartedInRange[track] then
                                continue
                            end
                            clickBlockButton()
                        end
                    end
                end
            end
        end
    end
end)



-- Tabs.Player

-- ======= D·ªäCH V·ª§ =======
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- ======= WHITELIST =======
local AllowedPlayers = {
    ["Noob"] = true, ["Guest1337"] = true, ["Elliot"] = true,
    ["Shedletsky"] = true, ["TwoTime"] = true, ["007n7"] = true,
    ["Chance"] = true, ["Builderman"] = true, ["Taph"] = true,
    ["Dusekkar"] = true,
}

local AllowedKillers = {
    ["Jason"] = true, ["1x1x1x1"] = true, ["c00lkidd"] = true,
    ["Noli"] = true, ["JohnDoe"] = true, ["Quest666"] = true,
}

-- ======= BI·∫æN TR·∫†NG TH√ÅI =======
local AimlockPlayerEnabled = false
local AimlockKillerEnabled = false

-- ======= H√ÄM H·ªñ TR·ª¢ =======
local function IsAllowed(model, list)
    return list[model.Name] == true
end

local function GetModelFromPlayer(plr, list)
    if not plr.Character then return nil end
    if IsAllowed(plr.Character, list) and plr.Character:FindFirstChildWhichIsA("Humanoid") then
        return plr.Character
    end
    for _, model in ipairs(workspace:GetChildren()) do
        if model:IsA("Model") and model:FindFirstChildWhichIsA("Humanoid") then
            if model:FindFirstChild("Owner") and model.Owner.Value == plr then
                if IsAllowed(model, list) then
                    return model
                end
            end
        end
    end
    return nil
end

local function GetClosestTarget(list)
    local myRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not myRoot then return nil end
    local closest, dist = nil, math.huge

    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer then
            local model = GetModelFromPlayer(plr, list)
            if model and model.PrimaryPart then
                local humanoid = model:FindFirstChildWhichIsA("Humanoid")
                if humanoid and humanoid.Health > 0 then
                    local distance = (model.PrimaryPart.Position - myRoot.Position).Magnitude
                    if distance < dist then
                        dist = distance
                        closest = model
                    end
                end
            end
        end
    end
    return closest
end

-- ======= AIMLOCK LOOP (gom chung) =======
RunService.RenderStepped:Connect(function()
    if AimlockPlayerEnabled then
        local t = GetClosestTarget(AllowedPlayers)
        if t then
            Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, t.PrimaryPart.Position)
        end
    elseif AimlockKillerEnabled then
        local t = GetClosestTarget(AllowedKillers)
        if t then
            Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, t.PrimaryPart.Position)
        end
    end
end)

-- ======= FLUENT TOGGLES =======
Tabs.Player:AddToggle("ForsakenAimlock", {
    Title = "Aimlock Player",
    Default = false
}):OnChanged(function(v)
    AimlockPlayerEnabled = v
    if v then AimlockKillerEnabled = false end -- tr√°nh b·∫≠t c·∫£ 2 c√πng l√∫c
end)

Tabs.Player:AddToggle("ForsakenAimlock1", {
    Title = "Aimlock Killer",
    Default = false
}):OnChanged(function(v)
    AimlockKillerEnabled = v
    if v then AimlockPlayerEnabled = false end -- tr√°nh b·∫≠t c·∫£ 2 c√πng l√∫c
end)




    Tabs.Player:AddSection("‚Ü≥ Cheats")
local ActiveNoStun = false
local noStunLoop

Tabs.Player:AddToggle("NoStunToggle", {
    Title = "No Stun",
    Default = false,
}):OnChanged(function(value)
    ActiveNoStun = value

    if value then
        -- N·∫øu c√≥ loop c≈© th√¨ d·ª´ng
        if noStunLoop then
            task.cancel(noStunLoop)
            noStunLoop = nil
        end

        -- T·∫°o loop m·ªõi li√™n t·ª•c ƒë·∫£m b·∫£o HumanoidRootPart kh√¥ng b·ªã anchore
        noStunLoop = task.spawn(function()
            while ActiveNoStun do
                local character = game.Players.LocalPlayer.Character
                local hrp = character and character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    hrp.Anchored = false
                end
                task.wait(0.1) -- Kh√¥ng c·∫ßn qu√° nhanh, tr√°nh lag
            end
        end)
    else
        -- T·∫Øt loop khi toggle off
        if noStunLoop then
            task.cancel(noStunLoop)
            noStunLoop = nil
        end
    end
end)




local InfStaminaEnabled = false
local staminaLoop
local StaminaModule

-- Th·ª≠ l·∫•y module an to√†n
pcall(function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local path = ReplicatedStorage:FindFirstChild("Systems")
        and ReplicatedStorage.Systems:FindFirstChild("Character")
        and ReplicatedStorage.Systems.Character:FindFirstChild("Game")
        and ReplicatedStorage.Systems.Character.Game:FindFirstChild("Sprinting")

    if path then
        StaminaModule = require(path)
    end
end)

-- H√†m h·ªìi stamina an to√†n
local function restoreStamina()
    if not StaminaModule then return end
    if StaminaModule.Stamina and StaminaModule.MaxStamina then
        StaminaModule.Stamina = StaminaModule.MaxStamina
        if StaminaModule.StaminaChanged and typeof(StaminaModule.StaminaChanged.Fire) == "function" then
            StaminaModule.StaminaChanged:Fire()
        end
    end
end

-- Ch·ªâ t·∫°o toggle n·∫øu module t·ªìn t·∫°i
if StaminaModule then
    Tabs.Player:AddToggle("InfStamina", {
        Title = "Infinite Stamina",
        Default = false
    }):OnChanged(function(value)
        -- lu√¥n b·ªçc trong pcall ƒë·ªÉ Fluent kh√¥ng b√°o "Callback error"
        local ok = pcall(function()
            InfStaminaEnabled = value
            if StaminaModule.StaminaLossDisabled ~= nil then
                StaminaModule.StaminaLossDisabled = value
            end

            if value then
                restoreStamina()
                if not staminaLoop then
                    staminaLoop = task.spawn(function()
                        while InfStaminaEnabled do
                            task.wait(0.5)
                            restoreStamina()
                        end
                        staminaLoop = nil
                    end)
                end
            end
        end)
        -- Kh√¥ng in warn n·ªØa, im l·∫∑ng b·ªè qua n·∫øu c√≥ l·ªói
    end)
else
    warn("[InfStamina] Sprinting module not found, toggle disabled.")
end


    Tabs.Player:AddSection("‚Ü≥ Hitbox")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Danh s√°ch model c·∫ßn tƒÉng hitbox
local targetModels = {
    ["Noob"] = true,
    ["Guest1337"] = true,
    ["Elliot"] = true,
    ["Shedletsky"] = true,
    ["TwoTime"] = true,
    ["007n7"] = true,
    ["Chance"] = true,
    ["Builderman"] = true,
    ["Taph"] = true,
    ["Dusekkar"] = true,
    ["Jason"] = true,
    ["1x1x1x1"] = true,
    ["c00lkidd"] = true,
    ["Noli"] = true,
    ["JohnDoe"] = true,
    ["Quest666"] = true
}

local HitboxEnabled = false
local HitboxScale = 2 -- m·∫∑c ƒë·ªãnh
local originalSizes = {}

-- H√†m √°p d·ª•ng hitbox
local function applyHitboxToCharacter(char, owner)
    if not HitboxEnabled then return end
    if not targetModels[char.Name] then return end
    if owner == LocalPlayer then return end -- Kh√¥ng √°p d·ª•ng cho b·∫£n th√¢n

    local part = char:FindFirstChild("HumanoidRootPart")
    if part and part:IsA("BasePart") then
        if not originalSizes[part] then
            originalSizes[part] = part.Size
        end

        part.Size = originalSizes[part] * HitboxScale
        part.Transparency = 0.8 -- Trong su·ªët
        part.Color = Color3.fromRGB(255, 0, 0) -- ƒê·ªè
        part.Material = Enum.Material.Neon
        part.CanCollide = false
    end
end

-- H√†m reset hitbox
local function resetHitbox(char)
    local part = char:FindFirstChild("HumanoidRootPart")
    if part and part:IsA("BasePart") and originalSizes[part] then
        part.Size = originalSizes[part]
        part.Transparency = 1
        part.Material = Enum.Material.Plastic
    end
end

-- Slider ch·ªânh scale
Tabs.Player:AddSlider("HitboxScale", {
    Title = "Hitbox Scale",
    Default = 2,
    Min = 1,
    Max = 10,
    Rounding = 1
}):OnChanged(function(value)
    HitboxScale = value
    if HitboxEnabled then
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr.Character then
                applyHitboxToCharacter(plr.Character, plr)
            end
        end
    end
end)

-- Toggle b·∫≠t/t·∫Øt (n·∫±m d∆∞·ªõi slider)
Tabs.Player:AddToggle("HitboxToggle", {
    Title = "Hitbox Target Players",
    Default = false
}):OnChanged(function(state)
    HitboxEnabled = state

    for _, player in ipairs(Players:GetPlayers()) do
        if player.Character then
            if state then
                applyHitboxToCharacter(player.Character, player)
            else
                resetHitbox(player.Character)
            end
        end
    end
end)

-- Theo d√µi player m·ªõi v√†o
Players.PlayerAdded:Connect(function(plr)
    plr.CharacterAdded:Connect(function(char)
        task.wait(0.1)
        applyHitboxToCharacter(char, plr)
    end)
end)

-- √Åp d·ª•ng cho player hi·ªán t·∫°i
for _, plr in ipairs(Players:GetPlayers()) do
    plr.CharacterAdded:Connect(function(char)
        task.wait(0.1)
        applyHitboxToCharacter(char, plr)
    end)
    if plr.Character then
        applyHitboxToCharacter(plr.Character, plr)
    end
end




    Tabs.Player:AddSection("‚Ü≥ Walk Speed")


local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local ValueSpeed = 16
local ActiveSpeedBoost = false
local speedLoop

local function setSpeed(speed)
    local character = LocalPlayer.Character
    if not character then return end
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.WalkSpeed = speed
        humanoid:SetAttribute("BaseSpeed", speed)
    end
end

-- Khi respawn √°p d·ª•ng l·∫°i t·ªëc ƒë·ªô n·∫øu b·∫≠t
LocalPlayer.CharacterAdded:Connect(function()
    task.wait(0.1)
    if ActiveSpeedBoost then
        setSpeed(ValueSpeed)
    end
end)

-- Slider ch·ªânh t·ªëc ƒë·ªô
Tabs.Player:AddSlider("PlayerSpeedSlider", {
    Title = "Set Speed",
    Min = 0,
    Max = 40,
    Default = ValueSpeed,
    Rounding = 1,
}):OnChanged(function(value)
    ValueSpeed = value
    if ActiveSpeedBoost then
        setSpeed(ValueSpeed)
    end
end)

-- Toggle b·∫≠t/t·∫Øt t·ªëc ƒë·ªô v√† loop tƒÉng t·ªëc li√™n t·ª•c
Tabs.Player:AddToggle("PlayerSpeedToggle", {
    Title = "Walk Speed",
    Default = false,
}):OnChanged(function(value)
    ActiveSpeedBoost = value
    if value then
        setSpeed(ValueSpeed)
        -- B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p li√™n t·ª•c set t·ªëc ƒë·ªô m·ªói 0.5 gi√¢y
        speedLoop = task.spawn(function()
            while ActiveSpeedBoost do
                setSpeed(ValueSpeed)
                task.wait(0.5)
            end
        end)
    else
        -- T·∫Øt v√≤ng l·∫∑p v√† reset t·ªëc ƒë·ªô v·ªÅ m·∫∑c ƒë·ªãnh 16
        if speedLoop then
            speedLoop = nil
        end
        setSpeed(16)
    end
end)


-- Tabs.Visual


local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera

-- üìå Danh s√°ch model Clone
local allowedModelsClone = {
    ["1x1x1x1Zombie"] = true,
    ["PizzaDeliveryRig"] = true,
    ["Mafia1"] = true,
    ["Mafia2"] = true,
}

-- Internal containers
local drawingsClone = {}
local espConnectionClone
local addedConnClone, removedConnClone

-- T·∫°o ESP + Highlight
local function createESP(model, drawings, color)
    if not model or drawings[model] then return end
    local hrp = model:FindFirstChild("HumanoidRootPart")
    local humanoid = model:FindFirstChildOfClass("Humanoid")
    if not hrp or not humanoid then return end

    -- Text
    local text = Drawing.new("Text")
    text.Size = 14
    text.Center = true
    text.Outline = true
    text.Visible = false
    text.Color = color

    -- Highlight
    local highlight = Instance.new("Highlight")
    highlight.Adornee = model
    highlight.FillColor = color
    highlight.OutlineColor = color
    highlight.FillTransparency = 0.7
    highlight.OutlineTransparency = 0
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Enabled = false
    highlight.Parent = model

    drawings[model] = {text = text, humanoid = humanoid, highlight = highlight}
end

-- Xo√° ESP
local function removeESP(model, drawings)
    local data = drawings[model]
    if data then
        if data.text then pcall(function() data.text:Remove() end) end
        if data.highlight then pcall(function() data.highlight:Destroy() end) end
    end
    drawings[model] = nil
end

-- Qu√©t workspace v√† t·∫°o ESP
local function scanWorkspaceForAllowed(allowedList, drawings, color)
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and allowedList[obj.Name] and obj:FindFirstChild("HumanoidRootPart") then
            createESP(obj, drawings, color)
        end
    end
end

-- üî• B·∫Øt ƒë·∫ßu ESP Clone
function startESPClone()
    if espConnectionClone then return end
    scanWorkspaceForAllowed(allowedModelsClone, drawingsClone, Color3.fromRGB(0, 255, 0)) -- m√†u xanh l√°

    espConnectionClone = RunService.RenderStepped:Connect(function()
        for model, data in pairs(drawingsClone) do
            local text, humanoid, highlight = data.text, data.humanoid, data.highlight
            if model.Parent and humanoid and humanoid.Health > 0 and model:FindFirstChild("HumanoidRootPart") then
                local hrp = model.HumanoidRootPart
                local pos, onScreen = Camera:WorldToViewportPoint(hrp.Position + Vector3.new(0, 2.5, 0))
                local dist = (hrp.Position - Camera.CFrame.Position).Magnitude
                text.Text = string.format("%s [%.0fm]", model.Name, dist)
                text.Position = Vector2.new(pos.X, pos.Y)
                text.Visible = onScreen
                highlight.Enabled = true
            else
                text.Visible = false
                if highlight then highlight.Enabled = false end
            end
        end
    end)

    addedConnClone = workspace.DescendantAdded:Connect(function(obj)
        local model = obj:IsA("Model") and obj or obj:FindFirstAncestorOfClass("Model")
        if model and allowedModelsClone[model.Name] and model:FindFirstChild("HumanoidRootPart") then
            createESP(model, drawingsClone, Color3.fromRGB(0, 255, 0))
        end
    end)

    removedConnClone = workspace.DescendantRemoving:Connect(function(obj)
        if obj:IsA("Model") and drawingsClone[obj] then
            removeESP(obj, drawingsClone)
        end
    end)
end

-- üõë D·ª´ng ESP Clone
function stopESPClone()
    if espConnectionClone then espConnectionClone:Disconnect() end
    if addedConnClone then addedConnClone:Disconnect() end
    if removedConnClone then removedConnClone:Disconnect() end
    for _, data in pairs(drawingsClone) do
        if data.text then pcall(function() data.text:Remove() end) end
        if data.highlight then pcall(function() data.highlight:Destroy() end) end
    end
    table.clear(drawingsClone)
    espConnectionClone, addedConnClone, removedConnClone = nil, nil, nil
end

-- üìå Toggle ESP Clone
Tabs.Visual:AddToggle("ESPCloneToggle", {
    Title = "ESP Clone",
    Default = false,
}):OnChanged(function(enabled)
    if enabled then
        startESPClone()
    else
        stopESPClone()
    end
end)



local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera

-- Danh s√°ch model
local allowedModelsWhite = {
    ["Noob"] = true, ["Guest1337"] = true, ["Elliot"] = true,
    ["Shedletsky"] = true, ["TwoTime"] = true, ["007n7"] = true,
    ["Chance"] = true, ["Builderman"] = true, ["Taph"] = true, ["Dusekkar"] = true,
}

local allowedModelsRed = {
    ["Jason"] = true, ["1x1x1x1"] = true, ["c00lkidd"] = true,
    ["Noli"] = true, ["JohnDoe"] = true, ["Quest666"] = true
}

-- Containers
local drawingsWhite, drawingsRed = {}, {}
local conWhiteLoop, conWhiteAdded, conWhiteRemoved
local conRedLoop, conRedAdded, conRedRemoved

-- Utility t·∫°o ESP
local function createESP(model, drawings, color)
    if not model or drawings[model] then return end
    local hrp = model:FindFirstChild("HumanoidRootPart")
    local humanoid = model:FindFirstChildOfClass("Humanoid")
    if not hrp or not humanoid then return end

    -- Text
    local text = Drawing.new("Text")
    text.Size = 14
    text.Center = true
    text.Outline = true
    text.Visible = false
    text.Color = color

    -- Highlight
    local highlight = Instance.new("Highlight")
    highlight.Adornee = model
    highlight.FillColor = color
    highlight.OutlineColor = color
    highlight.FillTransparency = 0.7
    highlight.OutlineTransparency = 0
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Enabled = false
    highlight.Parent = model

    drawings[model] = {text = text, humanoid = humanoid, highlight = highlight}
end

local function removeESP(model, drawings)
    local data = drawings[model]
    if data then
        if data.text then pcall(function() data.text:Remove() end) end
        if data.highlight then pcall(function() data.highlight:Destroy() end) end
    end
    drawings[model] = nil
end

-- === White ESP (Survivors) ===
local function startESPWhite()
    if conWhiteLoop then return end
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and allowedModelsWhite[obj.Name] then
            createESP(obj, drawingsWhite, Color3.fromRGB(255, 255, 255))
        end
    end

    conWhiteLoop = RunService.Heartbeat:Connect(function()
        task.spawn(function()
            for model, data in pairs(drawingsWhite) do
                local text, humanoid, highlight = data.text, data.humanoid, data.highlight
                if model.Parent and humanoid and humanoid.Health > 0 and model:FindFirstChild("HumanoidRootPart") then
                    local hrp = model.HumanoidRootPart
                    local pos, onScreen = Camera:WorldToViewportPoint(hrp.Position + Vector3.new(0,2.5,0))
                    local dist = (hrp.Position - Camera.CFrame.Position).Magnitude
                    text.Text = string.format("%s [%.0fm]", model.Name, dist)
                    text.Position = Vector2.new(pos.X, pos.Y)
                    text.Visible = onScreen
                    highlight.Enabled = true
                else
                    text.Visible = false
                    if highlight then highlight.Enabled = false end
                end
            end
        end)
        task.wait(0.5)
    end)

    conWhiteAdded = workspace.DescendantAdded:Connect(function(obj)
        if obj:IsA("Model") and allowedModelsWhite[obj.Name] then
            createESP(obj, drawingsWhite, Color3.fromRGB(255, 255, 255))
        end
    end)
    conWhiteRemoved = workspace.DescendantRemoving:Connect(function(obj)
        removeESP(obj, drawingsWhite)
    end)
end

local function stopESPWhite()
    if conWhiteLoop then conWhiteLoop:Disconnect(); conWhiteLoop = nil end
    if conWhiteAdded then conWhiteAdded:Disconnect(); conWhiteAdded = nil end
    if conWhiteRemoved then conWhiteRemoved:Disconnect(); conWhiteRemoved = nil end
    for _, d in pairs(drawingsWhite) do
        pcall(function() d.text:Remove() end)
        pcall(function() d.highlight:Destroy() end)
    end
    drawingsWhite = {}
end

-- === Red ESP (Killers) ===
local function startESPRed()
    if conRedLoop then return end
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and allowedModelsRed[obj.Name] then
            createESP(obj, drawingsRed, Color3.fromRGB(255, 0, 0))
        end
    end

    conRedLoop = RunService.Heartbeat:Connect(function()
        task.spawn(function()
            for model, data in pairs(drawingsRed) do
                local text, humanoid, highlight = data.text, data.humanoid, data.highlight
                if model.Parent and humanoid and humanoid.Health > 0 and model:FindFirstChild("HumanoidRootPart") then
                    local hrp = model.HumanoidRootPart
                    local pos, onScreen = Camera:WorldToViewportPoint(hrp.Position + Vector3.new(0,2.5,0))
                    local dist = (hrp.Position - Camera.CFrame.Position).Magnitude
                    text.Text = string.format("%s [%.0fm]", model.Name, dist)
                    text.Position = Vector2.new(pos.X, pos.Y)
                    text.Visible = onScreen
                    highlight.Enabled = true
                else
                    text.Visible = false
                    if highlight then highlight.Enabled = false end
                end
            end
        end)
        task.wait(0.5)
    end)

    conRedAdded = workspace.DescendantAdded:Connect(function(obj)
        if obj:IsA("Model") and allowedModelsRed[obj.Name] then
            createESP(obj, drawingsRed, Color3.fromRGB(255, 0, 0))
        end
    end)
    conRedRemoved = workspace.DescendantRemoving:Connect(function(obj)
        removeESP(obj, drawingsRed)
    end)
end

local function stopESPRed()
    if conRedLoop then conRedLoop:Disconnect(); conRedLoop = nil end
    if conRedAdded then conRedAdded:Disconnect(); conRedAdded = nil end
    if conRedRemoved then conRedRemoved:Disconnect(); conRedRemoved = nil end
    for _, d in pairs(drawingsRed) do
        pcall(function() d.text:Remove() end)
        pcall(function() d.highlight:Destroy() end)
    end
    drawingsRed = {}
end

-- Toggles
Tabs.Visual:AddToggle("ESPModelWhiteToggle", {
    Title = "ESP Survivors",
    Default = false,
}):OnChanged(function(enabled)
    if enabled then startESPWhite() else stopESPWhite() end
end)

Tabs.Visual:AddToggle("ESPModelRedToggle", {
    Title = "ESP Killers",
    Default = false,
}):OnChanged(function(enabled)
    if enabled then startESPRed() else stopESPRed() end
end)




-- === ESP Generator (Highlight) ===
local highlights, progressConns = {}, {}
local espLoop
local espEnabled = false
local genAddedConn, genRemovedConn

-- L·∫•y generators trong map
local function getGenerators()
    local list = {}
    local mapRoot = workspace:FindFirstChild("Map")
    local ingame = mapRoot and mapRoot:FindFirstChild("Ingame")
    local mapFolder = ingame and ingame:FindFirstChild("Map")

    for _, obj in ipairs((mapFolder or ingame or mapRoot or workspace):GetDescendants()) do
        if obj:IsA("Model") and obj.Name == "Generator" then
            if not obj.PrimaryPart then
                local part = obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")
                if part then
                    pcall(function() obj.PrimaryPart = part end)
                end
            end
            table.insert(list, obj)
        end
    end
    return list
end

local function isCompleted(gen)
    local p = gen:FindFirstChild("Progress")
    return p and tonumber(p.Value) and p.Value >= 100
end

local function ensureHighlight(gen)
    if highlights[gen] then
        highlights[gen].Enabled = true
        return
    end
    local h = Instance.new("Highlight")
    h.Adornee = gen
    h.FillColor = Color3.fromRGB(255,255,255)
    h.OutlineColor = Color3.fromRGB(255,255,255)
    h.FillTransparency = 0.5
    h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    h.Parent = gen
    highlights[gen] = h
end

local function cleanupModel(gen)
    if progressConns[gen] then
        progressConns[gen]:Disconnect()
        progressConns[gen] = nil
    end
    if highlights[gen] then
        highlights[gen]:Destroy()
        highlights[gen] = nil
    end
end

local function watchProgress(gen)
    if progressConns[gen] then return end
    local p = gen:FindFirstChild("Progress")
    if not p then return end
    progressConns[gen] = p.Changed:Connect(function()
        if not espEnabled then return end
        if isCompleted(gen) then
            if highlights[gen] then highlights[gen].Enabled = false end
        else
            ensureHighlight(gen)
        end
    end)
end

local function startESPGen()
    if espEnabled then return end
    espEnabled = true

    -- Loop c·∫≠p nh·∫≠t m·ªói 0.5s
    espLoop = task.spawn(function()
        while espEnabled do
            for _, gen in ipairs(getGenerators()) do
                if isCompleted(gen) then
                    if highlights[gen] then highlights[gen].Enabled = false end
                else
                    ensureHighlight(gen)
                end
                watchProgress(gen)
            end
            -- cleanup generator b·ªã xo√°
            for gen,_ in pairs(highlights) do
                if not gen:IsDescendantOf(workspace) then
                    cleanupModel(gen)
                end
            end
            task.wait(0.5)
        end
    end)

    -- K·∫øt n·ªëi spawn/remove
    genAddedConn = workspace.DescendantAdded:Connect(function(obj)
        if obj:IsA("Model") and obj.Name == "Generator" then
            task.defer(function()
                if isCompleted(obj) then
                    if highlights[obj] then highlights[obj].Enabled = false end
                else
                    ensureHighlight(obj)
                end
                watchProgress(obj)
            end)
        end
    end)

    genRemovedConn = workspace.DescendantRemoving:Connect(function(obj)
        if highlights[obj] or progressConns[obj] then
            cleanupModel(obj)
        end
    end)
end

local function stopESPGen()
    espEnabled = false
    if espLoop then espLoop = nil end
    if genAddedConn then genAddedConn:Disconnect(); genAddedConn = nil end
    if genRemovedConn then genRemovedConn:Disconnect(); genRemovedConn = nil end
    for gen,_ in pairs(progressConns) do
        cleanupModel(gen)
    end
end

-- Toggle GUI
Tabs.Visual:AddToggle("ESPGeneratorToggle", {
    Title = "ESP Generator",
    Default = false,
}):OnChanged(function(state)
    if state then startESPGen() else stopESPGen() end
end)



-- Tabs.Misc

local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")

-- ‚úÖ FullBright Settings
local fullBrightEnabled = false
local fullBrightLoop

local function applyFullBright()
    if not fullBrightEnabled then return end

    Lighting.Ambient = Color3.fromRGB(200, 200, 200) -- s√°ng nh·∫π
    Lighting.Brightness = 4 -- gi·∫£m ƒë·ªô s√°ng t·ª´ 10 ‚Üí 4
    Lighting.GlobalShadows = false
end

local function enableFullBright()
    if fullBrightLoop then fullBrightLoop:Disconnect() end
    applyFullBright()
    fullBrightLoop = Lighting:GetPropertyChangedSignal("ClockTime"):Connect(applyFullBright)
end

local function disableFullBright()
    if fullBrightLoop then
        fullBrightLoop:Disconnect()
        fullBrightLoop = nil
    end

    Lighting.Ambient = Color3.fromRGB(128, 128, 128)
    Lighting.Brightness = 1
    Lighting.GlobalShadows = true
end

-- ‚úÖ Toggle: FullBright
local FbToggle = Tabs.Misc:AddToggle("FbToggle", {
    Title = "Auto Full Bright",
    Default = false
})
FbToggle:OnChanged(function(Value)
    fullBrightEnabled = Value
    if fullBrightEnabled then
        enableFullBright()
    else
        disableFullBright()
    end
end)

-- ‚úÖ Remove Fog Settings
local fogEnabled = false
local fogLoop

local function removeFog()
    Lighting.FogStart = 0
    Lighting.FogEnd = 1000000

    local atmosphere = Lighting:FindFirstChild("Atmosphere")
    if atmosphere then
        atmosphere.Density = 0
        atmosphere.Offset = 0
        atmosphere.Haze = 0
        atmosphere.Color = Color3.new(1, 1, 1)
    end
end

local function restoreFog()
    Lighting.FogStart = 200
    Lighting.FogEnd = 1000

    local atmosphere = Lighting:FindFirstChild("Atmosphere")
    if atmosphere then
        atmosphere.Density = 0.3
        atmosphere.Offset = 0
        atmosphere.Haze = 0.5
        atmosphere.Color = Color3.fromRGB(200, 200, 200)
    end
end

-- ‚úÖ Toggle: Remove Fog
local FogToggle = Tabs.Misc:AddToggle("FogToggle", {
    Title = "Remove Fog",
    Default = false
})
FogToggle:OnChanged(function(Value)
    fogEnabled = Value
    if fogEnabled then
        removeFog()
        fogLoop = RunService.Heartbeat:Connect(removeFog)
    else
        if fogLoop then fogLoop:Disconnect() fogLoop = nil end
        restoreFog()
    end
end)




    Tabs.Misc:AddSection("‚Ü≥ Bypass")

local antiAFKCons = {}

-- Ch·ªâ t·∫°o toggle n·∫øu executor c√≥ getconnections
if getconnections then
    Tabs.Misc:AddToggle("AntiAFK", {
        Title = "Anti-AFK",
        Default = true
    }):OnChanged(function(state)
        local idleCons = getconnections(game.Players.LocalPlayer.Idled)
        
        if state then
            -- L∆∞u & disable
            for _, c in ipairs(idleCons) do
                antiAFKCons[c] = true
                c:Disable()
            end
            print("[AntiAFK] ƒê√£ b·∫≠t, b·∫°n s·∫Ω kh√¥ng b·ªã kick AFK.")
        else
            -- Enable l·∫°i
            for c,_ in pairs(antiAFKCons) do
                if c and c.Enable then
                    pcall(function() c:Enable() end)
                end
            end
            antiAFKCons = {}
            print("[AntiAFK] ƒê√£ t·∫Øt, Roblox s·∫Ω x·ª≠ l√Ω AFK b√¨nh th∆∞·ªùng.")
        end
    end)
else
    warn("[AntiAFK] Executor kh√¥ng h·ªó tr·ª£ getconnections, toggle b·ªã v√¥ hi·ªáu.")
end





Tabs.Misc:AddToggle("AntiReportScreenshot", {
    Title = "Anti-Ban [100%]",
    Default = true,
    Callback = function(state)
        -- D√πng bi·∫øn chung ƒë·ªÉ qu·∫£n l√Ω v√≤ng l·∫∑p
        if not shared.AntiBanLoop then
            shared.AntiBanLoop = {running = false, hooked = false}
        end
        local loopData = shared.AntiBanLoop

        local function hookOnce()
            -- Hook FindFirstChild
            if not loopData.hookedFind then
                local oldFind = workspace.FindFirstChild
                if typeof(oldFind) == "function" and hookfunction then
                    hookfunction(oldFind, function(self, ...)
                        local args = {...}
                        if tostring(args[1]):lower():find("screenshot") then
                            return nil
                        end
                        return oldFind(self, unpack(args))
                    end)
                    loopData.hookedFind = true
                end
            end

            -- Hook HTTP request
            if not loopData.hookedRequest then
                local oldRequest = (syn and syn.request) or request or http_request
                if hookfunction and typeof(oldRequest) == "function" then
                    hookfunction(oldRequest, function(req)
                        if req and req.Url and tostring(req.Url):lower():find("abuse") then
                            return {StatusCode = 200, Body = "Blocked"}
                        end
                        return oldRequest(req)
                    end)
                    loopData.hookedRequest = true
                end
            end
        end

        local function setFlagsOff()
            local flags = {
                "AbuseReportScreenshot",
                "AbuseReportScreenshotPercentage",
                "AbuseReportEnabled",
                "ReportAbuseMenu",
                "EnableAbuseReportScreenshot"
            }
            for _, flag in ipairs(flags) do
                if typeof(setfflag) == "function" then
                    pcall(function()
                        setfflag(flag, "False")
                    end)
                end
            end
            if typeof(setfflag) == "function" then
                setfflag("AbuseReportScreenshotPercentage", "0")
            end
        end

        local function setFlagsOn()
            if typeof(setfflag) == "function" then
                setfflag("AbuseReportScreenshot", "True")
                setfflag("AbuseReportScreenshotPercentage", "100")
            end
        end

        if state then
            hookOnce()
            setFlagsOff()
            loopData.running = true
            task.spawn(function()
                while loopData.running do
                    setFlagsOff()
                    task.wait(0.01) -- t·ªëc ƒë·ªô si√™u nhanh
                end
            end)
            print("[Anti-Ban] üõ°Ô∏è FAST protection ENABLED!")
        else
            loopData.running = false
            setFlagsOn()
            print("[Anti-Ban] ‚ö†Ô∏è Protection DISABLED.")
        end
    end
})





local Lighting = game:GetService("Lighting")
local Players = game:GetService("Players")
local LP = Players.LocalPlayer
local PlayerGui = LP:WaitForChild("PlayerGui")

local ActiveRemoveEffects = false

-- Danh s√°ch t√™n hi·ªáu ·ª©ng th∆∞·ªùng g·∫∑p
local effectNames = {
    "BlurEffect", "ColorCorrectionEffect", "BloomEffect", "SunRaysEffect", 
    "DepthOfFieldEffect", "ScreenFlash", "HitEffect", "DamageOverlay", 
    "BloodEffect", "Vignette", "BlackScreen", "WhiteScreen", "ShockEffect",
    "Darkness", "JumpScare", "LowHealthOverlay", "Flashbang", "FadeEffect"
}

-- Danh s√°ch class hi·ªáu ·ª©ng trong Lighting
local effectClasses = {
    "BlurEffect",
    "BloomEffect",
    "SunRaysEffect",
    "DepthOfFieldEffect",
    "ColorCorrectionEffect"
}

-- H√†m xo√° hi·ªáu ·ª©ng
local function removeEffects()
    -- Xo√° hi·ªáu ·ª©ng trong Lighting
    for _, obj in pairs(Lighting:GetDescendants()) do
        if table.find(effectNames, obj.Name) or table.find(effectClasses, obj.ClassName) then
            obj:Destroy()
        end
    end

    -- Xo√° GUI overlay
    for _, obj in pairs(PlayerGui:GetDescendants()) do
        if table.find(effectNames, obj.Name) then
            obj:Destroy()
        elseif obj:IsA("ScreenGui") or obj:IsA("BillboardGui") or obj:IsA("SurfaceGui") then
            if obj:FindFirstChildWhichIsA("ImageLabel") or obj:FindFirstChildWhichIsA("Frame") then
                if table.find(effectNames, obj.Name) or obj.Name:lower():find("overlay") or obj.Name:lower():find("effect") then
                    obj:Destroy()
                end
            end
        end
    end
end

-- Toggle Fluent
Tabs.Misc:AddToggle("RemoveScreenEffects", {
    Title = "Remove Effects",
    Default = true,
    Callback = function(state)
        ActiveRemoveEffects = state
        if state then
            task.spawn(function()
                while ActiveRemoveEffects do
                    removeEffects()
                    task.wait(0.5)
                end
            end)
        end
    end
})




-- === SafeGenTeleport (Anti Killers V2) ===
local Players = game:GetService("Players")
local LP = Players.LocalPlayer

local SafeGenRunning = false
local SafeGenThread

-- Danh s√°ch account th·∫≠t d√πng V2
local AllowedPlayers = {
    ["Hu1a0_Hu9"] = true,
    ["hdksakst"] = true
}

-- Danh s√°ch killers nguy hi·ªÉm
local DangerousKillers = {
    Jason = true, ["1x1x1x1"] = true, c00lkidd = true,
    Noli = true, JohnDoe = true, Quest666 = true
}

-- Danh s√°ch Clone (c≈©ng coi l√† nguy hi·ªÉm)
local DangerousClones = {
    PizzaDeliveryRig = true, Mafia1 = true, Mafia2 = true,
    ["1x1x1x1Zombie"] = true
}

-- Danh s√°ch NPC/Model Survivors
local TargetModels = {
    Noob = true, Guest1337 = true, Elliot = true, Shedletsky = true,
    TwoTime = true, ["007n7"] = true, Chance = true,
    Builderman = true, Taph = true, Dusekkar = true
}

-- ‚úÖ H√†m check c√≥ killer ho·∫∑c clone g·∫ßn kh√¥ng
local function isDangerNear(position, radius, includeClones)
    local killersFolder = workspace:FindFirstChild("Players") and workspace.Players:FindFirstChild("Killers")
    if killersFolder then
        for _, killer in ipairs(killersFolder:GetChildren()) do
            local hrp = killer:FindFirstChild("HumanoidRootPart")
            if hrp then
                if DangerousKillers[killer.Name] and (hrp.Position - position).Magnitude <= radius then
                    return true
                end
                if includeClones and DangerousClones[killer.Name] and (hrp.Position - position).Magnitude <= radius then
                    return true
                end
            end
        end
    end
    return false
end

-- ‚úÖ Teleport ƒë·∫øn generator xa & an to√†n nh·∫•t
local function teleportToSafeGenerator(includeClones)
    local character = LP.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    local myPos = character.HumanoidRootPart.Position
    local bestGen, bestDistance = nil, 0

    local mapFolder = workspace:FindFirstChild("Map")
        and workspace.Map:FindFirstChild("Ingame")
        and workspace.Map.Ingame:FindFirstChild("Map")
    if not mapFolder then return end

    for _, gen in ipairs(mapFolder:GetChildren()) do
        if gen.Name == "Generator" and gen:FindFirstChild("Progress") then
            local genPos = gen:GetPivot().Position
            local dist = (myPos - genPos).Magnitude
            if dist > bestDistance and not isDangerNear(genPos, 50, includeClones) then
                bestDistance = dist
                bestGen = gen
            end
        end
    end

    if bestGen then
        local goalPos = (bestGen:GetPivot() * CFrame.new(0, 0, -3)).Position
        character:PivotTo(CFrame.new(goalPos + Vector3.new(0, 2, 0)))
        print("‚úÖ Teleported to safe generator:", bestGen.Name)
    end
end

-- === Toggle GUI ===
Tabs.Misc:AddToggle("SafeGenTeleport", {
    Title = "Anti Killers V2",
    Default = false
}):OnChanged(function(state)
    SafeGenRunning = state
    if state then
        SafeGenThread = task.spawn(function()
            local delayTime = 0.1
            if AllowedPlayers[LP.Name] then
                print("üöÄ V2 Mode enabled for:", LP.Name)
                delayTime = 0.0000001
            else
                print("üê¢ V1 Mode enabled for:", LP.Name)
            end

            while SafeGenRunning do
                local character = LP.Character
                if character and character:FindFirstChild("HumanoidRootPart") then
                    local charName = character.Name

                    -- N·∫øu l√† Killer
                    if DangerousKillers[charName] or DangerousClones[charName] then
                        if not isDangerNear(character.HumanoidRootPart.Position, 50, true) then
                            teleportToSafeGenerator(false)
                        end

                    -- N·∫øu l√† Survivor
                    elseif TargetModels[charName] then
                        if isDangerNear(character.HumanoidRootPart.Position, 50, true) then
                            teleportToSafeGenerator(true)
                        end
                    end
                end
                task.wait(delayTime)
            end
        end)
    else
        -- Khi t·∫Øt ‚Üí flag false, loop t·ª± d·ª´ng
        SafeGenRunning = false
        SafeGenThread = nil
        print("[SafeGenTeleport] ƒê√£ t·∫Øt.")
    end
end)




    Tabs.Misc:AddSection("‚Ü≥ Show")

-- FPS + Ping Drawing Setup
local showFPS = true
local showPing = true

local fpsText = Drawing.new("Text")
fpsText.Size = 16
fpsText.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X - 100, 10)
fpsText.Color = Color3.fromRGB(0, 255, 0)
fpsText.Center = false
fpsText.Outline = true
fpsText.Visible = showFPS

local msText = Drawing.new("Text")
msText.Size = 16
msText.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X - 100, 30)
msText.Color = Color3.fromRGB(0, 255, 0)
msText.Center = false
msText.Outline = true
msText.Visible = showPing

local fpsCounter = 0
local fpsLastUpdate = tick()

RunService.RenderStepped:Connect(function()
    fpsCounter += 1
    if tick() - fpsLastUpdate >= 1 then
        -- Update FPS
        if showFPS then
            fpsText.Text = "FPS: " .. tostring(fpsCounter)
            fpsText.Visible = true
        else
            fpsText.Visible = false
        end

        -- Update Ping
        if showPing then
            local pingStat = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]
            local ping = pingStat and math.floor(pingStat:GetValue()) or 0
            msText.Text = "Ping: " .. ping .. " ms"

            if ping <= 60 then
                msText.Color = Color3.fromRGB(0, 255, 0)
            elseif ping <= 120 then
                msText.Color = Color3.fromRGB(255, 165, 0)
            else
                msText.Color = Color3.fromRGB(255, 0, 0)
            end

            msText.Visible = true
        else
            msText.Visible = false
        end

        fpsCounter = 0
        fpsLastUpdate = tick()
    end
end)

-- ‚úÖ Fluent GUI Toggles chu·∫©n
local fpsToggle = Tabs.Misc:AddToggle("ShowFPSToggle", {
    Title = "Show FPS",
    Default = true
})
fpsToggle:OnChanged(function(val)
    showFPS = val
    fpsText.Visible = val
end)

local pingToggle = Tabs.Misc:AddToggle("ShowPingToggle", {
    Title = "Show Ping",
    Default = true
})
pingToggle:OnChanged(function(val)
    showPing = val
    msText.Visible = val
end)

-- Tabs.Settings


local AexecToggle = Tabs.Settings:AddToggle("AexecToggle", {Title = "Auto Execute", Default = false })
AexecToggle:OnChanged(function(Value)
    if Value then
        task.spawn(function()
            pcall(function()
                if queue_on_teleport then
                    local HutaoHubScript1 = [[
task.wait(3)
loadstring(game:HttpGet("https://raw.githubusercontent.com/hdksakst-ship-it/Hutao-Hub-Omega-X/refs/heads/main/Forsaken-v3.txt"))()
]]
                    queue_on_teleport(HutaoHubScript1)
                end
            end)
        end)
        Fluent:Notify({
            Title = "Hutao HUB",
            Content = "Auto execute is enabled!",
            Duration = 5
        })
    else
        Fluent:Notify({
            Title = "Hutao HUB",
            Content = "Auto execute is disabled!",
            Duration = 5
        })
    end
end)

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("Hutao HUB")
SaveManager:SetFolder("Hutao HUB/Forsaken")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- Select First Tab By Default
Window:SelectTab(1)

Fluent:Notify({ Title = "Hutao HUB", Content = "forsaken script loaded successfully!", Duration = 5 })
SaveManager:LoadAutoloadConfig()


-- üü¢ DRAGGABLE UI BUTTON WITH ENHANCED CLICK AND HOVER ANIMATIONS
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local VirtualInputManager = game:GetService("VirtualInputManager")

local ExistingUI = CoreGui:FindFirstChild("HutaoHubMinimizeUI")
if ExistingUI then
    ExistingUI:Destroy()
end

-- Create Floating UI
local DragUI = Instance.new("ScreenGui")
DragUI.Name = "HutaoHubMinimizeUI"
DragUI.ResetOnSpawn = false
DragUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling -- Ensures highest rendering priority
DragUI.Parent = CoreGui -- Overrides all other UI elements

-- Create Circular Button (Draggable + Clickable)
local Button = Instance.new("ImageButton")
Button.Parent = DragUI
Button.Size = UDim2.new(0, 50, 0, 50) -- Adjust size if needed
Button.Position = UDim2.new(0, 10, 1, -85) -- Initial position
Button.BackgroundColor3 = Color3.fromRGB(30, 30, 30) -- Windows 11 Style
Button.BackgroundTransparency = 0.3 -- Semi-transparent
Button.BorderSizePixel = 0
Button.ClipsDescendants = true
Button.Image = "rbxassetid://90508203972003" -- Replace with your custom image ID
Button.ScaleType = Enum.ScaleType.Fit
Button.Active = true -- Allows drag functionality
Button.ZIndex = 1000 -- Ensure it stays on top

-- Make UI Circular
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(1, 0) -- Full circle
UICorner.Parent = Button

-- Tween Info for Animations
local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

-- Function to simulate RightShift key press
local function SimulateKeyPress()
    VirtualInputManager:SendKeyEvent(true, minimizeUI, false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, minimizeUI, false, game)
end

-- Click Animation & UI Toggle (Only if NOT dragged too much)
local isDragging = false
local dragThreshold = 10 -- Allow small movement without canceling click

Button.MouseButton1Click:Connect(function()
    if isDragging then return end -- Prevent click after large dragging

    -- Enhanced Click Animation
    local tween = TweenService:Create(Button, tweenInfo, {
        BackgroundTransparency = 0.5,
        Size = UDim2.new(0, 45, 0, 45),
        Rotation = 5
    })
    tween:Play()
    task.wait(0.1)
    local tweenBack = TweenService:Create(Button, tweenInfo, {
        BackgroundTransparency = 0.3,
        Size = UDim2.new(0, 50, 0, 50),
        Rotation = 0
    })
    tweenBack:Play()

    -- Simulate RightShift to Toggle UI
    SimulateKeyPress()
end)

-- Hover Animation
Button.MouseEnter:Connect(function()
    TweenService:Create(Button, tweenInfo, {Size = UDim2.new(0, 55, 0, 55)}):Play()
end)

Button.MouseLeave:Connect(function()
    TweenService:Create(Button, tweenInfo, {Size = UDim2.new(0, 50, 0, 50)}):Play()
end)

-- Dragging Logic for PC & Mobile
local dragging, dragStart, startPos

local function StartDrag(input)
    isDragging = false -- Reset dragging state
    dragging = true
    dragStart = input.Position
    startPos = Button.Position

    input.Changed:Connect(function()
        if input.UserInputState == Enum.UserInputState.End then
            dragging = false
        end
    end)
end

local function OnDrag(input)
    if dragging then
        local delta = (input.Position - dragStart).Magnitude
        if delta > dragThreshold then -- Only mark as dragged if movement exceeds threshold
            isDragging = true
        end
        Button.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + (input.Position.X - dragStart.X),
            startPos.Y.Scale,
            startPos.Y.Offset + (input.Position.Y - dragStart.Y)
        )
    end
end

-- Dragging Support for PC & Mobile (on the same button)
Button.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        StartDrag(input)
    end
end)

Button.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        OnDrag(input)
    end
end)