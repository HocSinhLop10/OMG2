--[[

 _   _    _   _   _____     _       ___     _   _   _   _   ____   
| | | |  | | | | |_   _|   / \     / _ \   | | | | | | | | | __ )  
| |_| |  | | | |   | |    / _ \   | | | |  | |_| | | | | | |  _ \  
|  _  |  | | | |   | |   / ___ \  | |_| |  |  _  | | |_| | | |_) | 
\_| |_/   \___/    \_/  /_/   \_\  \___/   \_| |_/  \___/  |____/

                        Hutao Hub
]]

---------------------------------------------------------------------------------

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/SLK-gaming/Fluent/refs/heads/main/SaveManager.lua.txt"))()

local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/SLK-gaming/Fluent/refs/heads/main/InterfaceManager.lua.txt"))()

local minimizeUI = Enum.KeyCode.RightAlt

-- üü¢ Create Main UI
local Window = Fluent:CreateWindow({
    Title = "Hutao Hub [Free] | Grow A Garden",
    SubTitle = "Version 0.0.1",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 360),
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = minimizeUI
})

-- Tabs
local Tabs = {
    About = Window:AddTab({ Title = "About", Icon = "rbxassetid://121302760641013"}),
    Main = Window:AddTab({ Title = "Main", Icon = "rbxassetid://121302760641013" }),
    Player = Window:AddTab({ Title = "Player", Icon = "rbxassetid://121302760641013" }),
    Shop = Window:AddTab({ Title = "Shop", Icon = "rbxassetid://121302760641013" }),
    Visual = Window:AddTab({ Title = "Visual", Icon = "rbxassetid://121302760641013" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "rbxassetid://121302760641013" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "rbxassetid://121302760641013" }),
}  

-- Tab.Dev

local Options = Fluent.Options


    Tabs.About:AddParagraph({
        Title = "Note",
        Content = "Thank you for using the script!"
    })

    Tabs.About:AddSection("‚Ü≥ Links")

    Tabs.About:AddButton({
        Title = "Discord",
        Description = "Copy the link to join the discord!",
        Callback = function()
            setclipboard("https://discord.gg/a4PsqfK6")
            Fluent:Notify({
                Title = "Notification",
                Content = "Successfully copied to the clipboard",
                SubContent = "", -- Optional
                Duration = 3 
            })
        end
    })



    Tabs.About:AddButton({
        Title = "Youtube",
        Description = "Copy link to Subscribe to Youtube channel!",
        Callback = function()
            setclipboard("https://www.youtube.com/@SLKgamingSSR")
            Fluent:Notify({
                Title = "Notification",
                Content = "Successfully copied to the clipboard!",
                SubContent = "", -- Optional
                Duration = 3 
            })
        end
    })


    Tabs.About:AddButton({
        Title = "Facebook",
        Description = "Copy link to join facebook group!",
        Callback = function()
            setclipboard("https://www.facebook.com/groups/1180845463307087/?ref=share&mibextid=NSMWBT")
            Fluent:Notify({
                Title = "Notification",
                Content = "Successfully copied to the clipboard!",
                SubContent = "", -- Optional
                Duration = 3 
            })
        end
    })

-- Tabs.Main



-- === Steal Best Fruit ===
Tabs.Main:AddButton({
    Title = "Steal Best Value",
    Callback = function()
        if not best_fruit then return end
        local root = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not root then return end

        local original_pos = root.CFrame
        for _, prompt in ipairs(best_fruit:GetDescendants()) do
            if prompt:IsA("ProximityPrompt") then
                local target = prompt.Parent:IsA("BasePart") and prompt.Parent or best_fruit:FindFirstChildWhichIsA("BasePart")
                if target then
                    root.CFrame = target.CFrame + Vector3.new(0, 3, 0)
                    task.wait(0.2)
                    fireproximityprompt(prompt)
                    task.wait(0.2)
                    root.CFrame = original_pos
                end
                break
            end
        end
    end
})



    Tabs.Main:AddSection("‚Ü≥ Harvest")


-- üå± Auto Harvest (Dropdown Speed + Teleport Bypass Distance)
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local Workspace = game:GetService("Workspace")

-- T√¨m plot farm c·ªßa m√¨nh
local farms = Workspace:FindFirstChild("Farm")
local plot = nil
for _, v in farms:GetDescendants() do
    if v.Name == "Owner" and v.Value == LocalPlayer.Name then
        plot = v.Parent.Parent
        break
    end
end

if not plot then
    LocalPlayer:Kick("Plot not found!")
end

local plant_physical = plot:WaitForChild("Plants_Physical")

-- üå± B·∫£ng t·ªëc ƒë·ªô thu ho·∫°ch
local speedDelays = {
    ["Slow"] = 1,      -- 1 gi√¢y
    ["Normal"] = 0.1,  -- 0.1 gi√¢y
    ["Fast"] = 0.01,   -- 0.01 gi√¢y
    ["Super"] = 0.001, -- 0.001 gi√¢y
}

-- State
local autoHarvestThread
local selectedSpeed = "Normal"
local harvestToggle = false

-- Function check backpack ƒë·∫ßy
local function isFull()
    return #Backpack:GetChildren() > 200
end

-- üå± H√†m harvest prompt t·ª´ xa (√©p kho·∫£ng c√°ch)
local function harvestPrompt(prompt)
    -- √âp kho·∫£ng c√°ch c·ª±c l·ªõn
    prompt.MaxActivationDistance = 999999999
    pcall(function()
        fireproximityprompt(prompt)
    end)
end

-- üå± Auto Harvest Loop
local function startAutoHarvest()
    autoHarvestThread = task.spawn(function()
        while harvestToggle do
            local delay = speedDelays[selectedSpeed] or 0.1

            if not isFull() then
                local prompts = {}
                -- gom prompt l·∫°i 1 l·∫ßn ‚Üí tr√°nh lag do qu√©t li√™n t·ª•c
                for _, v in plant_physical:GetDescendants() do
                    if v:IsA("ProximityPrompt") then
                        table.insert(prompts, v)
                    end
                end

                for _, prompt in ipairs(prompts) do
                    task.defer(function()
                        harvestPrompt(prompt)
                    end)
                    task.wait(delay)
                end
            else
                -- N·∫øu full th√¨ ngh·ªâ 2 gi√¢y ‚Üí tr√°nh lag/kick
                task.wait(2)
            end

            task.wait()
        end
    end)
end

local function stopAutoHarvest()
    if autoHarvestThread then
        task.cancel(autoHarvestThread)
        autoHarvestThread = nil
    end
end

-- === üå± GUI Bindings (Fluent Style) ===
-- Dropdown ch·ªçn t·ªëc ƒë·ªô
local harvestDropdown = Tabs.Main:AddDropdown("HarvestSpeedDropdown", {
    Title = "Harvest Speed",
    Values = { "Slow", "Normal", "Fast", "Super" },
    Default = "Normal"
})

harvestDropdown:OnChanged(function(val)
    selectedSpeed = val
end)

-- Toggle Auto Harvest
local harvestToggleUI = Tabs.Main:AddToggle("HarvestAuraToggle", {
    Title = "Auto Harvest",
    Default = false
})

harvestToggleUI:OnChanged(function(Value)
    harvestToggle = Value
    if Value then
        startAutoHarvest()
    else
        stopAutoHarvest()
    end
end)

    Tabs.Main:AddSection("‚Ü≥ Plant")

-- === Auto Plant Seeds ===
Tabs.Main:AddDropdown("PlantMethod", {
    Title = "Select Plant Method",
    Values = { "Player Position", "Selected Position" },
    Multi = false,
    Default = plantSeedMethod
}):OnChanged(function(selection)
    plantSeedMethod = selection
end)

Tabs.Main:AddToggle("AutoPlantSeeds", {
    Title = "Auto Plant Seeds",
    Default = autoPlantSeeds,
    Tooltip = "Plants seeds automatically with selected method"
}):OnChanged(function(enabled)
    autoPlantSeeds = enabled
    if enabled then
        task.spawn(function()
            repeat
                for _, tool in pairs(Backpack:GetChildren()) do
                    if tool:IsA("Tool") and tool:GetAttribute("ITEM_TYPE") == "n" then -- Seed
                        LocalPlayer.Character.Humanoid:EquipTool(tool)
                        local qty = tool:GetAttribute("Quantity") or 1
                        for i = 1, qty do
                            local pos = (plantSeedMethod == "Selected Position" and selectedPositionPlant) or LocalPlayer.Character:GetPivot().Position
                            ReplicatedStorage.GameEvents.Plant_RE:FireServer(pos, tool:GetAttribute("Seed"))
                            task.wait(0.25)
                        end
                    end
                end
                task.wait()
            until not autoPlantSeeds
        end)
    end
end)

Tabs.Main:AddButton({
    Title = "Set Plant Position",
    Callback = function()
        if LocalPlayer.Character then
            selectedPositionPlant = LocalPlayer.Character:GetPivot().Position
            Fluent:Notify({Title = "Hutao Hub", Content = "Plant position set!", Duration = 2})
        end
    end
})




    Tabs.Main:AddSection("‚Ü≥ Hatch")



-- === Hatch Speed Dropdown (tr∆∞·ªõc Hatch Aura) ===
Tabs.Main:AddDropdown("HatchSpeed", {
    Title = "Hatch Speed",
    Values = { "Slow", "Normal", "Fast", "Super" },
    Multi = false,
    Default = "Normal",
    Tooltip = "Select hatch speed"
}):OnChanged(function(value)
    if value == "Slow" then
        hatchDelay = 1
    elseif value == "Normal" then
        hatchDelay = 0.1
    elseif value == "Fast" then
        hatchDelay = 0.01
    elseif value == "Super" then
        hatchDelay = 0.001
    end

    if hatchDelay == 0.001 then
        Fluent:Notify({Title = "Hutao Hub", Content = "Super speed may cause lag!", Duration = 2})
    end
end)

-- === Hatch Aura ===
Tabs.Main:AddToggle("HatchAura", {
    Title = "Hatch Aura",
    Default = hatchAura,
}):OnChanged(function(enabled)
    hatchAura = enabled
    if enabled then
        task.spawn(function()
            repeat
                for _, obj in pairs(ObjectPhysical:GetDescendants()) do
                    if obj:IsA("ProximityPrompt") and obj.Parent.Parent:GetAttribute("TimeToHatch") == 0 then
                        if (obj.Parent.Parent:GetPivot().Position - LocalPlayer.Character:GetPivot().Position).Magnitude < obj.MaxActivationDistance * 2 then
                            obj:InputHoldBegin()
                            task.wait(0.1)
                            obj:InputHoldEnd()
                            task.wait(hatchDelay)
                        end
                    end
                end
                task.wait()
            until not hatchAura
        end)
    end
end)


    Tabs.Main:AddSection("‚Ü≥ Place")

-- === Auto Place Eggs ===
Tabs.Main:AddDropdown("PlaceEggMethod", {
    Title = "Select Egg Place Method",
    Values = { "Player Position", "Selected Position" },
    Multi = false,
    Default = place_egg_method,
    Tooltip = "Auto places eggs with selected method"
}):OnChanged(function(selection)
    place_egg_method = selection
end)

Tabs.Main:AddToggle("AutoPlaceEggs", {
    Title = "Auto Place Eggs",
    Default = auto_place_eggs,
}):OnChanged(function(enabled)
    auto_place_eggs = enabled
    if enabled then
        task.spawn(function()
            repeat
                if #ObjectPhysical:GetChildren() < 3 then
                    for _, v in pairs(Backpack:GetChildren()) do
                        if v:IsA("Tool") and v:GetAttribute(inventory_enums.ITEM_TYPE) == item_types.PetEgg then
                            LocalPlayer.Character.Humanoid:EquipTool(v)
                            local tool = get_tool()
                            if tool and tool:GetAttribute(inventory_enums.Uses) then
                                for i = 1, tool:GetAttribute(inventory_enums.Uses) do
                                    local pos = (place_egg_method == "Selected Position" and selected_position_egg) or LocalPlayer.Character:GetPivot().Position
                                    ReplicatedStorage.GameEvents.PetEggService:FireServer("CreateEgg", pos)
                                    task.wait(0.25)
                                end
                            end
                        end
                    end
                end
                task.wait()
            until not auto_place_eggs
        end)
    end
end)

Tabs.Main:AddButton({
    Title = "Set Egg Position",
    Callback = function()
        if LocalPlayer.Character then
            selected_position_egg = LocalPlayer.Character:GetPivot().Position
            Fluent:Notify({Title = "Hutao Hub", Content = "Egg position set!", Duration = 2})
        end
    end
})

-- === Egg Predictor ===
Tabs.Main:AddToggle("EggPredictor", {
    Title = "Predict Egg Hatch",
    Default = egg_predictor,
}):OnChanged(function(enabled)
    egg_predictor = enabled
end)





-- Tabs.Player


local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")

-- =======================
-- 3. NoClip
-- =======================
local noclipToggle = Tabs.Player:AddToggle("NoClipToggle", {
    Title = "NoClip",
    Default = false
})

local noclipConnection

local function startNoClip()
    local char = LocalPlayer.Character
    if not char then return end
    local rootPart = char:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    noclipConnection = RunService.Stepped:Connect(function()
        if noclipToggle.Value then
            for _, part in pairs(char:GetDescendants()) do
                if part:IsA("BasePart") and part.CanCollide then
                    part.CanCollide = false
                end
            end
        end
    end)
end

local function stopNoClip()
    local char = LocalPlayer.Character
    if char then
        for _, part in pairs(char:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true -- reset l·∫°i m·∫∑c ƒë·ªãnh
            end
        end
    end
    if noclipConnection then
        noclipConnection:Disconnect()
        noclipConnection = nil
    end
end

noclipToggle:OnChanged(function(value)
    if value then
        startNoClip()
    else
        stopNoClip()
    end
end)


-- Toggle Nh·∫£y V√¥ H·∫°n trong Tabs.Player
local infiniteJumpToggle = Tabs.Player:AddToggle("InfiniteJumpToggle", {
    Title = "Infinite Jump",
    Default = false
})

local infiniteJumpConnection

-- H√†m b·∫≠t/t·∫Øt nh·∫£y v√¥ h·∫°n
local function startInfiniteJump()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    infiniteJumpConnection = game:GetService("UserInputService").JumpRequest:Connect(function()
        if infiniteJumpToggle.Value then
            local char = LocalPlayer.Character
            if char and char:FindFirstChildOfClass("Humanoid") then
                char.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end
    end)
end

local function stopInfiniteJump()
    if infiniteJumpConnection then
        infiniteJumpConnection:Disconnect()
        infiniteJumpConnection = nil
    end
end

infiniteJumpToggle:OnChanged(function(Value)
    if Value then
        startInfiniteJump()
    else
        stopInfiniteJump()
    end
end)


    Tabs.Player:AddSection("‚Ü≥ Flying")



local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- State
local flying = false
local flySpeed = 50
local bodyVelocity, bodyGyro, renderConn

-- Function: Start Flying
local function startFlying()
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoid = character:WaitForChild("Humanoid")
	local HRP = character:WaitForChild("HumanoidRootPart")

	local seat = humanoid.SeatPart
	local attachPart = seat or HRP

	-- Body movers
	bodyVelocity = Instance.new("BodyVelocity")
	bodyVelocity.MaxForce = Vector3.new(1e5, 1e5, 1e5)
	bodyVelocity.Velocity = Vector3.zero
	bodyVelocity.Parent = attachPart

	bodyGyro = Instance.new("BodyGyro")
	bodyGyro.MaxTorque = Vector3.new(1e5, 1e5, 1e5)
	bodyGyro.CFrame = attachPart.CFrame
	bodyGyro.Parent = attachPart

	humanoid:ChangeState(Enum.HumanoidStateType.Physics)

	-- Movement logic
	renderConn = RunService.RenderStepped:Connect(function()
		if attachPart and Camera then
			local camCF = Camera.CFrame
			local moveDir = humanoid.MoveDirection

			local moveVec = Vector3.zero

			if moveDir.Magnitude > 0 then
				-- D·ª±ng vector bay theo h∆∞·ªõng nh√¨n
				local forward = camCF.LookVector
				local flatForward = Vector3.new(forward.X, 0, forward.Z).Unit
				local verticalInfluence = forward.Unit.Y

				-- X√°c ƒë·ªãnh xem ƒëang ƒëi ti·∫øn hay l√πi
				local movingForward = flatForward:Dot(moveDir.Unit) > 0.1
				local movingBackward = flatForward:Dot(moveDir.Unit) < -0.1

				local yVelocity = 0

				-- N·∫øu ƒëang ƒëi ti·∫øn ho·∫∑c l√πi, √°p d·ª•ng h∆∞·ªõng nh√¨n ƒë·ªÉ tƒÉng gi·∫£m ƒë·ªô cao
				if movingForward then
					yVelocity = verticalInfluence
				elseif movingBackward then
					yVelocity = -verticalInfluence
				end

				-- K·∫øt h·ª£p chuy·ªÉn ƒë·ªông ngang + d·ªçc
				moveVec = Vector3.new(moveDir.X, yVelocity, moveDir.Z).Unit
			end

			bodyVelocity.Velocity = moveVec * flySpeed
			bodyGyro.CFrame = camCF
		end
	end)

	flying = true
end

-- Function: Stop Flying
local function stopFlying()
	flying = false

	if renderConn then renderConn:Disconnect() renderConn = nil end
	if bodyVelocity then bodyVelocity:Destroy() bodyVelocity = nil end
	if bodyGyro then bodyGyro:Destroy() bodyGyro = nil end

	-- Fix: Kh√¥i ph·ª•c tr·∫°ng th√°i nh√¢n v·∫≠t
	local character = player.Character
	if character then
		local humanoid = character:FindFirstChildOfClass("Humanoid")
		if humanoid then
			humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
		end
	end
end

-- Auto handle respawn
Players.LocalPlayer.CharacterAdded:Connect(function()
	if flying then
		task.wait(1)
		startFlying()
	end
end)

-- üü¢ Slider l√™n tr∆∞·ªõc Toggle
local FlySpeedSlider = Tabs.Player:AddSlider("FlySpeedSlider", {
	Title = "Fly Speed",
	Default = 50,
	Min = 10,
	Max = 300,
	Rounding = 0,
})

FlySpeedSlider:OnChanged(function(Value)
	flySpeed = Value
end)

local FlyToggle = Tabs.Player:AddToggle("FlyToggle", {
	Title = "Fly New",
	Default = false
})

FlyToggle:OnChanged(function(Value)
	if Value then
		startFlying()
	else
		stopFlying()
	end
end)


    Tabs.Player:AddSection("‚Ü≥ Walk Speed")


-- === Walk Speed Setup ===
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")

local defaultSpeed = 16
local maxSpeed = 300
local currentSpeed = defaultSpeed
local walkSpeedEnabled = false

-- C·∫≠p nh·∫≠t Humanoid khi respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    Humanoid = Character:WaitForChild("Humanoid")
    if walkSpeedEnabled then
        Humanoid.WalkSpeed = currentSpeed
    else
        Humanoid.WalkSpeed = defaultSpeed
    end
end)

-- === GUI Bindings ===
-- Slider Walk Speed
Tabs.Player:AddSlider("WalkSpeedSlider", {
    Title = "Set Speed",
    Min = 16,
    Max = maxSpeed,
    Default = defaultSpeed,
    Rounding = 1,
}):OnChanged(function(value)
    currentSpeed = value
    if walkSpeedEnabled and Humanoid then
        Humanoid.WalkSpeed = currentSpeed
    end
end)

-- Toggle b·∫≠t/t·∫Øt Walk Speed
Tabs.Player:AddToggle("WalkSpeedToggle", {
    Title = "Walk Speed",
    Default = false,
}):OnChanged(function(enabled)
    walkSpeedEnabled = enabled
    if Humanoid then
        if walkSpeedEnabled then
            Humanoid.WalkSpeed = currentSpeed
        else
            Humanoid.WalkSpeed = defaultSpeed
        end
    end
end)


    Tabs.Player:AddSection("‚Ü≥ Jump Power")


-- === High Jump Setup ===
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")

local defaultJump = 50      -- M·∫∑c ƒë·ªãnh gi·ªëng Roblox
local maxJump = 300          -- Max Roblox JumpPower
local currentJump = defaultJump
local jumpEnabled = false

-- C·∫≠p nh·∫≠t Humanoid khi respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    Humanoid = Character:WaitForChild("Humanoid")
    if jumpEnabled then
        Humanoid.JumpPower = currentJump
    else
        Humanoid.JumpPower = defaultJump
    end
end)

-- === GUI Bindings ===
-- Slider Jump Power
Tabs.Player:AddSlider("JumpPowerSlider", {
    Title = "Jump Power",
    Min = 50,
    Max = maxJump,
    Default = defaultJump,
    Rounding = 1,
}):OnChanged(function(value)
    currentJump = value
    if jumpEnabled and Humanoid then
        Humanoid.JumpPower = currentJump
    end
end)

-- Toggle b·∫≠t/t·∫Øt High Jump
Tabs.Player:AddToggle("HighJumpToggle", {
    Title = "High Jump",
    Default = false,
}):OnChanged(function(enabled)
    jumpEnabled = enabled
    if Humanoid then
        if jumpEnabled then
            Humanoid.JumpPower = currentJump
        else
            Humanoid.JumpPower = defaultJump
        end
    end
end)

-- Tabs.Shop

-- === Sell All / Sell Held Item ===
Tabs.Shop:AddButton({
    Title = "Sell All Plant",
    Callback = function()
        local character = LocalPlayer.Character
        local sell_point = workspace:FindFirstChild("Tutorial_Points") and workspace.Tutorial_Points:FindFirstChild("Tutorial_Point_2")
        if character and sell_point then
            local old_pos = character:GetPivot().Position
            character:MoveTo(sell_point.Position)
            task.wait(0.25)
            
            local sell_inventory = ReplicatedStorage:FindFirstChild("GameEvents") and ReplicatedStorage.GameEvents:FindFirstChild("Sell_Inventory")
            if sell_inventory then
                -- L·∫•y t·∫•t c·∫£ tool Holdable v√† Pet trong backpack
                local uuids = {}
                for _, tool in ipairs(backpack:GetChildren()) do
                    if tool:IsA("Tool") then
                        local type_ = tool:GetAttribute(inventory_enums.ITEM_TYPE)
                        if type_ == item_types.Holdable or type_ == item_types.Pet then
                            local uuid = tool:GetAttribute(inventory_enums.ITEM_UUID)
                            if uuid then table.insert(uuids, uuid) end
                        end
                    end
                end
                for _, uuid in ipairs(uuids) do
                    sell_inventory:FireServer(uuid)
                    task.wait(0.1)
                end
                Fluent:Notify({Title="Hutao Hub", Content="Sold all items!", Duration=2})
            else
                Fluent:Notify({Title="Hutao Hub", Content="Sell_Inventory event not found!", Duration=2})
            end

            task.wait(0.25)
            character:MoveTo(old_pos)
        else
            Fluent:Notify({Title="Hutao Hub", Content="Character or sell point not found!", Duration=2})
        end
    end
})

Tabs.Shop:AddButton({
    Title = "Sell Held Item",
    Callback = function()
        local tool = get_tool()
        local character = LocalPlayer.Character
        local sell_point = workspace:FindFirstChild("Tutorial_Points") and workspace.Tutorial_Points:FindFirstChild("Tutorial_Point_2")

        if not tool then
            Fluent:Notify({Title="Hutao Hub", Content="Not holding a tool", Duration=2})
            return
        end
        if not character or not sell_point then
            Fluent:Notify({Title="Hutao Hub", Content="Character or sell point not found!", Duration=2})
            return
        end

        local item_type = tool:GetAttribute(inventory_enums.ITEM_TYPE)
        if item_type == item_types.Holdable or item_type == item_types.Pet then
            local uuid = tool:GetAttribute(inventory_enums.ITEM_UUID)
            if not uuid then
                Fluent:Notify({Title="Hutao Hub", Content="Tool UUID not found!", Duration=2})
                return
            end

            local old_pos = character:GetPivot().Position
            character:MoveTo(sell_point.Position)
            task.wait(0.25)

            local sell_item = ReplicatedStorage:FindFirstChild("GameEvents") and ReplicatedStorage.GameEvents:FindFirstChild("Sell_Item")
            if sell_item then
                sell_item:FireServer(uuid)
                Fluent:Notify({Title="Hutao Hub", Content="Sold "..tool.Name, Duration=2})
            else
                Fluent:Notify({Title="Hutao Hub", Content="Sell_Item event not found!", Duration=2})
            end

            task.wait(0.25)
            character:MoveTo(old_pos)
        end
    end
})



local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = game:GetService("Players").LocalPlayer

-- D·ªØ li·ªáu
local seed_data = require(ReplicatedStorage.Data:WaitForChild("SeedData"))
local egg_data = require(ReplicatedStorage.Data:WaitForChild("PetEggData"))
local gear_data = require(ReplicatedStorage.Data:WaitForChild("GearData"))
local cosmetic_data = require(ReplicatedStorage.Data:WaitForChild("CosmeticItemShopData"))

-- Danh s√°ch item
local seed_names, egg_names, gear_names, cosmetic_names = {}, {}, {}, {}
for i,v in seed_data do if v.StockChance>0 then table.insert(seed_names,i) end end
for _,v in egg_data do if v.StockChance>0 then table.insert(egg_names,v.EggName) end end
for _,v in gear_data do if v.StockChance>0 then table.insert(gear_names,v.GearName) end end
for _,v in cosmetic_data do table.insert(cosmetic_names,v.CosmeticName) end

-- State
local auto_buy_seeds, auto_buy_eggs, auto_buy_gears, auto_buy_cosmetics = false, false, false, false
local selected_seeds, selected_eggs, selected_gears, selected_cosmetics = {}, {}, {}, {}
local BUY_DELAY = 0.1

-- B·ªô ƒë·∫øm th√¥ng b√°o
local purchase_counts = {}

-- H√†m loop an to√†n cho toggle
local function safeToggleLoop(enabledFlag, func)
    task.spawn(function()
        while enabledFlag() do
            local ok, err = pcall(func)
            if not ok then warn("Error in auto-buy loop:", err) end
            task.wait(BUY_DELAY)
        end
    end)
end

-- H√†m th√¥ng b√°o Fluent GUI
local function notifyItem(name, count)
    Fluent:Notify({
        Title = "Hutao Hub [Free]",
        Content = "You Bought " ..name.." x"..count,
        Duration = 2
    })
end

    Tabs.Shop:AddSection("‚Ü≥ Seed")


-- === Seed Shop Multi-select ===
Tabs.Shop:AddDropdown("SelectSeed", { Title = "Select Seed", Values = seed_names, Multi = true, Default = {} })
    :OnChanged(function(selection)
        selected_seeds = {}
        for item, isSelected in pairs(selection) do
            if isSelected then table.insert(selected_seeds, item) end
        end
    end)

Tabs.Shop:AddToggle("AutoBuySeed", { Title = "Auto Buy Seed", Default = false })
    :OnChanged(function(enabled)
        auto_buy_seeds = enabled
        safeToggleLoop(function() return auto_buy_seeds end, function()
            local shop = LocalPlayer.PlayerGui.Seed_Shop.Frame.ScrollingFrame:GetChildren()
            for _, v in shop do
                if table.find(selected_seeds, v.Name) then
                    local stock = tonumber(v.Main_Frame.Stock_Text.Text:match("%d+")) or 0
                    if stock > 0 then
                        ReplicatedStorage.GameEvents.BuySeedStock:FireServer(v.Name)
                        purchase_counts[v.Name] = (purchase_counts[v.Name] or 0) + 1
                        notifyItem(v.Name, purchase_counts[v.Name])
                        task.wait(BUY_DELAY)
                    end
                end
            end
        end)
    end)


    Tabs.Shop:AddSection("‚Ü≥ Eggs")


-- === Egg Shop Multi-select ===
Tabs.Shop:AddDropdown("SelectEgg", { Title = "Select Egg", Values = egg_names, Multi = true, Default = {} })
    :OnChanged(function(selection)
        selected_eggs = {}
        for item, isSelected in pairs(selection) do
            if isSelected then table.insert(selected_eggs, item) end
        end
    end)

Tabs.Shop:AddToggle("AutoBuyEgg", { Title = "Auto Buy Egg", Default = false })
    :OnChanged(function(enabled)
        auto_buy_eggs = enabled
        safeToggleLoop(function() return auto_buy_eggs end, function()
            local locations = workspace.NPCS["Pet Stand"].EggLocations:GetChildren()
            for i,v in ipairs(locations) do
                if table.find(selected_eggs, v.Name) and not v:GetAttribute("RobuxEggOnly") then
                    ReplicatedStorage.GameEvents.BuyPetEgg:FireServer(i-3)
                    purchase_counts[v.Name] = (purchase_counts[v.Name] or 0) + 1
                    notifyItem(v.Name, purchase_counts[v.Name])
                    task.wait(BUY_DELAY)
                end
            end
        end)
    end)

    Tabs.Shop:AddSection("‚Ü≥ Gear")


-- === Gear Shop Multi-select ===
Tabs.Shop:AddDropdown("SelectGear", { Title = "Select Gear", Values = gear_names, Multi = true, Default = {} })
    :OnChanged(function(selection)
        selected_gears = {}
        for item, isSelected in pairs(selection) do
            if isSelected then table.insert(selected_gears, item) end
        end
    end)

Tabs.Shop:AddToggle("AutoBuyGear", { Title = "Auto Buy Gear", Default = false })
    :OnChanged(function(enabled)
        auto_buy_gears = enabled
        safeToggleLoop(function() return auto_buy_gears end, function()
            local shop = LocalPlayer.PlayerGui.Gear_Shop.Frame.ScrollingFrame:GetChildren()
            for _, v in shop do
                if table.find(selected_gears, v.Name) then
                    local stock = tonumber(v.Main_Frame.Stock_Text.Text:match("%d+")) or 0
                    if stock > 0 then
                        ReplicatedStorage.GameEvents.BuyGearStock:FireServer(v.Name)
                        purchase_counts[v.Name] = (purchase_counts[v.Name] or 0) + 1
                        notifyItem(v.Name, purchase_counts[v.Name])
                        task.wait(BUY_DELAY)
                    end
                end
            end
        end)
    end)


    Tabs.Shop:AddSection("‚Ü≥ Cosmetic")


-- === Cosmetic Shop Multi-select ===
Tabs.Shop:AddDropdown("SelectCosmetic", { Title = "Select Cosmetic", Values = cosmetic_names, Multi = true, Default = {} })
    :OnChanged(function(selection)
        selected_cosmetics = {}
        for item, isSelected in pairs(selection) do
            if isSelected then table.insert(selected_cosmetics, item) end
        end
    end)

Tabs.Shop:AddToggle("AutoBuyCosmetic", { Title = "Auto Buy Cosmetic", Default = false })
    :OnChanged(function(enabled)
        auto_buy_cosmetics = enabled
        safeToggleLoop(function() return auto_buy_cosmetics end, function()
            local content = LocalPlayer.PlayerGui.CosmeticShop_UI.CosmeticShop.Main.Holder.Shop.ContentFrame:GetDescendants()
            for _, v in content do
                if table.find(selected_cosmetics, v.Name) then
                    local stock = tonumber(v.Main.Stock.STOCK_TEXT.Text:match("%d+")) or 0
                    if stock > 0 then
                        if v.Parent.Name == "BottomSegment" then
                            ReplicatedStorage.GameEvents.BuyCosmeticItem:FireServer(v.Name)
                        elseif v.Parent.Name == "TopSegment" then
                            ReplicatedStorage.GameEvents.BuyCosmeticCrate:FireServer(v.Name)
                        end
                        purchase_counts[v.Name] = (purchase_counts[v.Name] or 0) + 1
                        notifyItem(v.Name, purchase_counts[v.Name])
                        task.wait(BUY_DELAY)
                    end
                end
            end
        end)
    end)

-- Tabs.Visual


local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Internal containers
local drawingsPlayer = {}
local espConnectionPlayer
local addedConnPlayer, removedConnPlayer

-- T·∫°o ESP + Highlight cho Player
local function createPlayerESP(player, drawings, color)
    if not player.Character or drawings[player] then return end
    local model = player.Character
    local hrp = model:FindFirstChild("HumanoidRootPart")
    local humanoid = model:FindFirstChildOfClass("Humanoid")
    if not hrp or not humanoid then return end

    -- Text
    local text = Drawing.new("Text")
    text.Size = 14
    text.Center = true
    text.Outline = true
    text.Visible = false
    text.Color = color

    -- Highlight
    local highlight = Instance.new("Highlight")
    highlight.Adornee = model
    highlight.FillColor = color
    highlight.OutlineColor = color
    highlight.FillTransparency = 0.7
    highlight.OutlineTransparency = 0
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Enabled = false
    highlight.Parent = model

    drawings[player] = {text = text, humanoid = humanoid, highlight = highlight}
end

-- Xo√° ESP Player
local function removePlayerESP(player, drawings)
    local data = drawings[player]
    if data then
        if data.text then pcall(function() data.text:Remove() end) end
        if data.highlight then pcall(function() data.highlight:Destroy() end) end
    end
    drawings[player] = nil
end

-- Qu√©t t·∫•t c·∫£ Player ƒë·ªÉ t·∫°o ESP
local function scanPlayersForESP()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            createPlayerESP(player, drawingsPlayer, Color3.new(1,1,1)) -- m√†u tr·∫Øng
        end
    end
end

-- üî• B·∫Øt ƒë·∫ßu ESP Player
local function startESPPlayer()
    if espConnectionPlayer then return end
    scanPlayersForESP()

    espConnectionPlayer = RunService.RenderStepped:Connect(function()
        for player, data in pairs(drawingsPlayer) do
            local text, humanoid, highlight = data.text, data.humanoid, data.highlight
            if player.Character and humanoid and humanoid.Health > 0 and player.Character:FindFirstChild("HumanoidRootPart") then
                local hrp = player.Character.HumanoidRootPart
                local pos, onScreen = Camera:WorldToViewportPoint(hrp.Position + Vector3.new(0, 2.5, 0))
                local dist = (hrp.Position - Camera.CFrame.Position).Magnitude
                text.Text = string.format("%s [%.0fm]", player.Name, dist)
                text.Position = Vector2.new(pos.X, pos.Y)
                text.Visible = onScreen
                highlight.Enabled = true
            else
                text.Visible = false
                highlight.Enabled = false
            end
        end
    end)

    Players.PlayerAdded:Connect(function(player)
        if player ~= LocalPlayer then
            createPlayerESP(player, drawingsPlayer, Color3.new(1,1,1))
        end
    end)

    Players.PlayerRemoving:Connect(function(player)
        removePlayerESP(player, drawingsPlayer)
    end)
end

-- üõë D·ª´ng ESP Player
local function stopESPPlayer()
    if espConnectionPlayer then espConnectionPlayer:Disconnect() end
    for player, data in pairs(drawingsPlayer) do
        if data.text then pcall(function() data.text:Remove() end) end
        if data.highlight then pcall(function() data.highlight:Destroy() end) end
    end
    table.clear(drawingsPlayer)
    espConnectionPlayer = nil
end

-- üìå Toggle ESP Player
Tabs.Visual:AddToggle("ESPPlayerToggle", {
    Title = "ESP Player",
    Default = false,
}):OnChanged(function(enabled)
    if enabled then
        startESPPlayer()
    else
        stopESPPlayer()
    end
end)



-- Tabs.Misc

-- üåê Anti AFK Script (Fluent GUI)
local Players = game:GetService("Players")
local VirtualUser = game:GetService("VirtualUser")

local LocalPlayer = Players.LocalPlayer
local antiAfkEnabled = false

-- NgƒÉn b·ªã AFK
LocalPlayer.Idled:Connect(function()
    if antiAfkEnabled then
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end
end)

-- === GUI Bindings (Fluent Style) ===
local antiAfkToggle = Tabs.Misc:AddToggle("AntiAFKToggle", {
    Title = "Anti AFK",
    Default = false,
    Tooltip = "Prevents you from getting disconnected due to inactivity"
})

antiAfkToggle:OnChanged(function(Value)
    antiAfkEnabled = Value
end)

    Tabs.Misc:AddSection("‚Ü≥ Server")

local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer

-- State
local autoRejoin = false
local rejoinConnection

-- === H√†m Rejoin an to√†n ===
local function safeRejoin()
    pcall(function()
        Fluent:Notify({
            Title = "Hutao Hub [Free]",
            Content = "Rejoining server...",
            Duration = 2
        })
    end)
    task.spawn(function()
        task.wait(1)
        pcall(function()
            TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId)
        end)
    end)
end

-- === Button Rejoin Server ===
pcall(function()
    Tabs.Misc:AddButton({
        Title = "Rejoin Server",
        Callback = safeRejoin
    })
end)

-- === Toggle Auto Rejoin ===
pcall(function()
    local toggle = Tabs.Misc:AddToggle({
        Title = "Auto Rejoin",
        Default = false
    })
    -- Ki·ªÉm tra toggle c√≥ OnChanged kh√¥ng
    if toggle and toggle.OnChanged then
        toggle:OnChanged(function(enabled)
            autoRejoin = enabled

            -- Ng·∫Øt k·∫øt n·ªëi c≈©
            if rejoinConnection then
                rejoinConnection:Disconnect()
                rejoinConnection = nil
            end

            if autoRejoin then
                rejoinConnection = Players.PlayerRemoving:Connect(function(player)
                    if player == LocalPlayer then
                        safeRejoin()
                    end
                end)
            end
        end)
    end
end)


    Tabs.Misc:AddSection("‚Ü≥ Show")

-- FPS + Ping Drawing Setup
local showFPS = true
local showPing = true

local fpsText = Drawing.new("Text")
fpsText.Size = 16
fpsText.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X - 100, 10)
fpsText.Color = Color3.fromRGB(0, 255, 0)
fpsText.Center = false
fpsText.Outline = true
fpsText.Visible = showFPS

local msText = Drawing.new("Text")
msText.Size = 16
msText.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X - 100, 30)
msText.Color = Color3.fromRGB(0, 255, 0)
msText.Center = false
msText.Outline = true
msText.Visible = showPing

local fpsCounter = 0
local fpsLastUpdate = tick()

RunService.RenderStepped:Connect(function()
    fpsCounter += 1
    if tick() - fpsLastUpdate >= 1 then
        -- Update FPS
        if showFPS then
            fpsText.Text = "FPS: " .. tostring(fpsCounter)
            fpsText.Visible = true
        else
            fpsText.Visible = false
        end

        -- Update Ping
        if showPing then
            local pingStat = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]
            local ping = pingStat and math.floor(pingStat:GetValue()) or 0
            msText.Text = "Ping: " .. ping .. " ms"

            if ping <= 60 then
                msText.Color = Color3.fromRGB(0, 255, 0)
            elseif ping <= 120 then
                msText.Color = Color3.fromRGB(255, 165, 0)
            else
                msText.Color = Color3.fromRGB(255, 0, 0)
            end

            msText.Visible = true
        else
            msText.Visible = false
        end

        fpsCounter = 0
        fpsLastUpdate = tick()
    end
end)

-- ‚úÖ Fluent GUI Toggles chu·∫©n
local fpsToggle = Tabs.Misc:AddToggle("ShowFPSToggle", {
    Title = "Show FPS",
    Default = true
})
fpsToggle:OnChanged(function(val)
    showFPS = val
    fpsText.Visible = val
end)

local pingToggle = Tabs.Misc:AddToggle("ShowPingToggle", {
    Title = "Show Ping",
    Default = true
})
pingToggle:OnChanged(function(val)
    showPing = val
    msText.Visible = val
end)

-- Tabs.Settings


local AexecToggle = Tabs.Settings:AddToggle("AexecToggle", {Title = "Auto Execute", Default = false })
AexecToggle:OnChanged(function(Value)
    if Value then
        task.spawn(function()
            pcall(function()
                if queue_on_teleport then
                    local HutaoHubScript1 = [[
task.wait(3)
loadstring(game:HttpGet('https://raw.githubusercontent.com/hungquan99/SkullHub/main/loader.lua'))()
]]
                    queue_on_teleport(HutaoHubScript1)
                end
            end)
        end)
        Fluent:Notify({
            Title = "Hutao HUB",
            Content = "Auto execute is enabled!",
            Duration = 5
        })
    else
        Fluent:Notify({
            Title = "Hutao HUB",
            Content = "Auto execute is disabled!",
            Duration = 5
        })
    end
end)

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("Hutao HUB")
SaveManager:SetFolder("Hutao HUB/Grow A Garden")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- Select First Tab By Default
Window:SelectTab(1)

Fluent:Notify({ Title = "Hutao HUB", Content = "Grow A Garden script loaded successfully!", Duration = 5 })
SaveManager:LoadAutoloadConfig()


-- üü¢ DRAGGABLE UI BUTTON WITH ENHANCED CLICK AND HOVER ANIMATIONS
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local VirtualInputManager = game:GetService("VirtualInputManager")

local ExistingUI = CoreGui:FindFirstChild("HutaoHubMinimizeUI")
if ExistingUI then
    ExistingUI:Destroy()
end

-- Create Floating UI
local DragUI = Instance.new("ScreenGui")
DragUI.Name = "HutaoHubMinimizeUI"
DragUI.ResetOnSpawn = false
DragUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling -- Ensures highest rendering priority
DragUI.Parent = CoreGui -- Overrides all other UI elements

-- Create Circular Button (Draggable + Clickable)
local Button = Instance.new("ImageButton")
Button.Parent = DragUI
Button.Size = UDim2.new(0, 50, 0, 50) -- Adjust size if needed
Button.Position = UDim2.new(0, 10, 1, -85) -- Initial position
Button.BackgroundColor3 = Color3.fromRGB(30, 30, 30) -- Windows 11 Style
Button.BackgroundTransparency = 0.3 -- Semi-transparent
Button.BorderSizePixel = 0
Button.ClipsDescendants = true
Button.Image = "rbxassetid://90508203972003" -- Replace with your custom image ID
Button.ScaleType = Enum.ScaleType.Fit
Button.Active = true -- Allows drag functionality
Button.ZIndex = 1000 -- Ensure it stays on top

-- Make UI Circular
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(1, 0) -- Full circle
UICorner.Parent = Button

-- Tween Info for Animations
local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

-- Function to simulate RightShift key press
local function SimulateKeyPress()
    VirtualInputManager:SendKeyEvent(true, minimizeUI, false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, minimizeUI, false, game)
end

-- Click Animation & UI Toggle (Only if NOT dragged too much)
local isDragging = false
local dragThreshold = 10 -- Allow small movement without canceling click

Button.MouseButton1Click:Connect(function()
    if isDragging then return end -- Prevent click after large dragging

    -- Enhanced Click Animation
    local tween = TweenService:Create(Button, tweenInfo, {
        BackgroundTransparency = 0.5,
        Size = UDim2.new(0, 45, 0, 45),
        Rotation = 5
    })
    tween:Play()
    task.wait(0.1)
    local tweenBack = TweenService:Create(Button, tweenInfo, {
        BackgroundTransparency = 0.3,
        Size = UDim2.new(0, 50, 0, 50),
        Rotation = 0
    })
    tweenBack:Play()

    -- Simulate RightShift to Toggle UI
    SimulateKeyPress()
end)

-- Hover Animation
Button.MouseEnter:Connect(function()
    TweenService:Create(Button, tweenInfo, {Size = UDim2.new(0, 55, 0, 55)}):Play()
end)

Button.MouseLeave:Connect(function()
    TweenService:Create(Button, tweenInfo, {Size = UDim2.new(0, 50, 0, 50)}):Play()
end)

-- Dragging Logic for PC & Mobile
local dragging, dragStart, startPos

local function StartDrag(input)
    isDragging = false -- Reset dragging state
    dragging = true
    dragStart = input.Position
    startPos = Button.Position

    input.Changed:Connect(function()
        if input.UserInputState == Enum.UserInputState.End then
            dragging = false
        end
    end)
end

local function OnDrag(input)
    if dragging then
        local delta = (input.Position - dragStart).Magnitude
        if delta > dragThreshold then -- Only mark as dragged if movement exceeds threshold
            isDragging = true
        end
        Button.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + (input.Position.X - dragStart.X),
            startPos.Y.Scale,
            startPos.Y.Offset + (input.Position.Y - dragStart.Y)
        )
    end
end

-- Dragging Support for PC & Mobile (on the same button)
Button.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        StartDrag(input)
    end
end)

Button.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        OnDrag(input)
    end
end)